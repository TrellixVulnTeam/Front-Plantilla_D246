{"version":3,"file":"luxon-date-adapter.js","sourceRoot":"","sources":["../../../../../libs/datepicker/luxon/luxon-date-adapter.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,cAAc,EAAE,MAAM,eAAe,CAAC;AAC7E,OAAO,EAAE,eAAe,EAAE,MAAM,wBAAwB,CAAC;AACzD,OAAO,EAAE,WAAW,EAAE,MAAM,yBAAyB,CAAC;AACtD,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAmB,MAAM,OAAO,CAAC;;AAmBxD,gEAAgE;AAChE,MAAM,CAAC,MAAM,8BAA8B,GAAG,IAAI,cAAc,CAC9D,gCAAgC,EAChC;IACE,UAAU,EAAE,MAAM;IAClB,OAAO,EAAE,sCAAsC;CAChD,CACF,CAAC;AAEF,oBAAoB;AACpB,MAAM,UAAU,sCAAsC;IACpD,OAAO;QACL,MAAM,EAAE,KAAK;KACd,CAAC;AACJ,CAAC;AAED,kEAAkE;AAClE,MAAM,kBAAkB,GAAG,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAE3D,kEAAkE;AAClE,MAAM,kBAAkB,GAAG,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAE1E,oEAAoE;AACpE,MAAM,oBAAoB,GAAG,KAAK,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;AAE/C,iDAAiD;AACjD,SAAS,KAAK,CAAI,MAAc,EAAE,aAAmC;IACnE,MAAM,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC;IAClC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;QAC/B,WAAW,CAAC,CAAC,CAAC,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;KACnC;IACD,OAAO,WAAW,CAAC;AACrB,CAAC;AAED,wDAAwD;AAExD,MAAM,OAAO,gBAAiB,SAAQ,WAAqB;IAIzD,YACuC,UAAkB,EAGvD,OAAoC;QAEpC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC;QAClD,IAAI,CAAC,kBAAkB,GAAG,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,cAAc,CAAC;QAClD,IAAI,CAAC,SAAS,CAAC,UAAU,IAAI,QAAQ,CAAC,KAAK,EAAE,CAAC,MAAM,CAAC,CAAC;IACxD,CAAC;IAED,SAAS,CAAC,MAAc;QACtB,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IAC1B,CAAC;IAED,OAAO,CAAC,IAAc;QACpB,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;IAED,QAAQ,CAAC,IAAc;QACrB,wEAAwE;QACxE,OAAO,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;IACxB,CAAC;IAED,OAAO,CAAC,IAAc;QACpB,OAAO,IAAI,CAAC,GAAG,CAAC;IAClB,CAAC;IAED,QAAQ,CAAC,IAAc;QACrB,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;IAED,QAAQ,CAAC,IAAc,EAAE,IAAY;QACnC,OAAO,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;IAC5B,CAAC;IAED,UAAU,CAAC,IAAc;QACvB,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAED,UAAU,CAAC,IAAc,EAAE,MAAc;QACvC,OAAO,IAAI,CAAC,GAAG,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;IAC9B,CAAC;IAED,UAAU,CAAC,IAAc;QACvB,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAED,UAAU,CAAC,IAAc,EAAE,MAAc,EAAE,EAAW;QACpD,OAAO,IAAI,CAAC,GAAG,CAAC,EAAE,MAAM,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC,CAAC;IAC/C,CAAC;IAED,eAAe,CAAC,IAAc;QAC5B,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAED,YAAY,CAAC,IAAc;QACzB,OAAO,IAAI,CAAC,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;IAC/C,CAAC;IAED,aAAa,CAAC,KAAkC;QAC9C,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;IACrD,CAAC;IAED,YAAY;QACV,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE;YACxB,sDAAsD;YACtD,yDAAyD;YACzD,MAAM,GAAG,GAAG,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE;gBAC/C,GAAG,EAAE,SAAS;gBACd,QAAQ,EAAE,KAAK;aAChB,CAAC,CAAC;YAEH,OAAO,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE;gBACrB,kDAAkD;gBAClD,MAAM,IAAI,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;gBAErD,+DAA+D;gBAC/D,OAAO,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAC;YACzD,CAAC,CAAC,CAAC;SACJ;QACD,OAAO,kBAAkB,CAAC;IAC5B,CAAC;IAED,YAAY;QACV,OAAO,kBAAkB,CAAC;IAC5B,CAAC;IAED,cAAc;QACZ,OAAO,oBAAoB,CAAC;IAC9B,CAAC;IAED,iBAAiB,CAAC,KAAkC;QAClD,MAAM,aAAa,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACzE,gDAAgD;QAChD,8DAA8D;QAC9D,aAAa,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,EAAG,CAAC,CAAC;QAC5C,OAAO,aAAa,CAAC;IACvB,CAAC;IAED,WAAW,CAAC,IAAc;QACxB,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IAC/B,CAAC;IAED,iBAAiB;QACf,oEAAoE;QACpE,IAAI,IAAI,CAAC,kBAAkB,EAAE;YAC3B,OAAO,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SAC7C;QACD,OAAO,CAAC,CAAC;IACX,CAAC;IAED,iBAAiB,CAAC,IAAc;QAC9B,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAED,KAAK,CAAC,IAAc;QAClB,OAAO,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;IACrE,CAAC;IAED,UAAU,CACR,IAAY,EACZ,KAAa,EACb,IAAY,EACZ,QAAgB,CAAC,EACjB,UAAkB,CAAC,EACnB,UAAkB,CAAC,EACnB,KAAa,CAAC;QAEd,IAAI,KAAK,GAAG,CAAC,IAAI,KAAK,GAAG,EAAE,EAAE;YAC3B,MAAM,KAAK,CACT,wBAAwB,KAAK,4CAA4C,CAC1E,CAAC;SACH;QAED,IAAI,IAAI,GAAG,CAAC,EAAE;YACZ,MAAM,KAAK,CAAC,iBAAiB,IAAI,mCAAmC,CAAC,CAAC;SACvE;QAED,kEAAkE;QAClE,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO;YACzB,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,GAAG,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,EAAE,CAAC;YAClE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,GAAG,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,EAAE,CAAC,CAAC;QAEvE,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YACzB,MAAM,KAAK,CAAC,iBAAiB,IAAI,eAAe,MAAM,CAAC,aAAa,IAAI,CAAC,CAAC;SAC3E;QAED,OAAO,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACvC,CAAC;IAED,KAAK;QACH,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC,SAAS,CACjE,IAAI,CAAC,MAAM,CACZ,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,KAAU,EAAE,WAA8B;QAC9C,MAAM,OAAO,GAAoB,IAAI,CAAC,WAAW,EAAE,CAAC;QAEpD,IAAI,OAAO,KAAK,IAAI,QAAQ,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;YAChD,MAAM,WAAW,GAAG,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;YAErD,IAAI,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;gBAC7B,OAAO,WAAW,CAAC;aACpB;YAED,MAAM,YAAY,GAAG,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC;gBAC7C,CAAC,CAAC,WAAW;gBACb,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC;YAClB,KAAK,MAAM,MAAM,IAAI,YAAY,EAAE;gBACjC,MAAM,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;gBAE/D,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;oBAC5B,OAAO,UAAU,CAAC;iBACnB;aACF;YAED,OAAO,IAAI,CAAC,OAAO,EAAE,CAAC;SACvB;aAAM,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YACpC,OAAO,QAAQ,CAAC,UAAU,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;SAC5C;aAAM,IAAI,KAAK,YAAY,IAAI,EAAE;YAChC,OAAO,QAAQ,CAAC,UAAU,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;SAC5C;aAAM,IAAI,KAAK,YAAY,QAAQ,EAAE;YACpC,OAAO,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE,OAAO,CAAC,CAAC;SACvD;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,CAAC,IAAc,EAAE,aAAqB;QAC1C,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACvB,MAAM,KAAK,CAAC,+CAA+C,CAAC,CAAC;SAC9D;QACD,OAAO,IAAI;aACR,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC;aACtB,QAAQ,CAAC,aAAa,EAAE,EAAE,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC;IAC7E,CAAC;IAED,gBAAgB,CAAC,IAAc,EAAE,KAAa;QAC5C,OAAO,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACrD,CAAC;IAED,iBAAiB,CAAC,IAAc,EAAE,MAAc;QAC9C,OAAO,IAAI,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACtD,CAAC;IAED,eAAe,CAAC,IAAc,EAAE,IAAY;QAC1C,OAAO,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACpD,CAAC;IAED,gBAAgB,CAAC,IAAc,EAAE,KAAa;QAC5C,OAAO,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;IAC9B,CAAC;IAED,kBAAkB,CAAC,IAAc,EAAE,OAAe;QAChD,OAAO,IAAI,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;IAChC,CAAC;IAED,kBAAkB,CAAC,IAAc,EAAE,OAAe,EAAE,EAAW;QAC7D,OAAO,IAAI,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,YAAY,EAAE,EAAE,EAAE,CAAC,CAAC;IAClD,CAAC;IAED,SAAS,CAAC,IAAc;QACtB,OAAO,IAAI,CAAC,KAAK,EAAE,CAAC;IACtB,CAAC;IAED;;;;OAIG;IACH,WAAW,CAAC,KAAU;QACpB,MAAM,OAAO,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QACnC,IAAI,IAAI,CAAC;QACT,IAAI,KAAK,YAAY,IAAI,EAAE;YACzB,IAAI,GAAG,QAAQ,CAAC,UAAU,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;SAC5C;QACD,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC7B,IAAI,CAAC,KAAK,EAAE;gBACV,OAAO,IAAI,CAAC;aACb;YACD,IAAI,GAAG,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;SACzC;QACD,IAAI,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YAC9B,OAAO,IAAI,CAAC;SACb;QACD,OAAO,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;IAClC,CAAC;IAED,cAAc,CAAC,GAAQ;QACrB,OAAO,GAAG,YAAY,QAAQ,CAAC;IACjC,CAAC;IAED,OAAO,CAAC,IAAc;QACpB,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED,OAAO;QACL,OAAO,QAAQ,CAAC,OAAO,CAAC,gCAAgC,CAAC,CAAC;IAC5D,CAAC;IAED,sFAAsF;IAC9E,WAAW;QACjB,OAAO;YACL,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS;YACtC,MAAM,EAAE,IAAI,CAAC,MAAM;SACpB,CAAC;IACJ,CAAC;;iIAjRU,gBAAgB,kBAKL,eAAe,6BAE3B,8BAA8B;qIAP7B,gBAAgB;4FAAhB,gBAAgB;kBAD5B,UAAU;;0BAMN,QAAQ;;0BAAI,MAAM;2BAAC,eAAe;;0BAClC,QAAQ;;0BACR,MAAM;2BAAC,8BAA8B","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport { Inject, Injectable, Optional, InjectionToken } from '@angular/core';\nimport { MAT_DATE_LOCALE } from '@angular/material/core';\nimport { DateAdapter } from '@matheo/datepicker/core';\nimport { DateTime, Info, DateTimeOptions } from 'luxon';\n\n/** Configurable options for {@see LuxonDateAdapter}. */\nexport interface MatLuxonDateAdapterOptions {\n  /**\n   * Turns the use of utc dates on or off.\n   * Changing this will change how Angular Material components like DatePicker output dates.\n   * {@default false}\n   */\n  useUtc: boolean;\n\n  /**\n   * Luxon does not have support for retrieving the first day of the week.\n   * This allows supplying a custom function to override it.\n   * Remember that you need to return 0 = Sunday, 1 = Monday\n   */\n  firstDayOfWeek?: (locale: string) => number;\n}\n\n/** InjectionToken for LuxonDateAdapter to configure options. */\nexport const MAT_LUXON_DATE_ADAPTER_OPTIONS = new InjectionToken<MatLuxonDateAdapterOptions>(\n  'MAT_LUXON_DATE_ADAPTER_OPTIONS',\n  {\n    providedIn: 'root',\n    factory: MAT_LUXON_DATE_ADAPTER_OPTIONS_FACTORY,\n  }\n);\n\n/** @docs-private */\nexport function MAT_LUXON_DATE_ADAPTER_OPTIONS_FACTORY(): MatLuxonDateAdapterOptions {\n  return {\n    useUtc: false,\n  };\n}\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, (i) => String(i + 1));\n\n/** The default hour names to use if Intl API is not available. */\nconst DEFAULT_HOUR_NAMES = range(24, (i) => (i === 0 ? '00' : String(i)));\n\n/** The default minute names to use if Intl API is not available. */\nconst DEFAULT_MINUTE_NAMES = range(60, String);\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts Luxon Dates for use with Angular Material. */\n@Injectable()\nexport class LuxonDateAdapter extends DateAdapter<DateTime> {\n  private _useUTC: boolean;\n  private _getFirstDayOfWeek: MatLuxonDateAdapterOptions['firstDayOfWeek'];\n\n  constructor(\n    @Optional() @Inject(MAT_DATE_LOCALE) dateLocale: string,\n    @Optional()\n    @Inject(MAT_LUXON_DATE_ADAPTER_OPTIONS)\n    options?: MatLuxonDateAdapterOptions\n  ) {\n    super();\n    this._useUTC = options ? !!options.useUtc : false;\n    this._getFirstDayOfWeek = options?.firstDayOfWeek;\n    this.setLocale(dateLocale || DateTime.local().locale);\n  }\n\n  setLocale(locale: string) {\n    super.setLocale(locale);\n  }\n\n  getYear(date: DateTime): number {\n    return date.year;\n  }\n\n  getMonth(date: DateTime): number {\n    // Luxon works with 1-indexed months whereas our code expects 0-indexed.\n    return date.month - 1;\n  }\n\n  getDate(date: DateTime): number {\n    return date.day;\n  }\n\n  getHours(date: DateTime): number {\n    return date.hour;\n  }\n\n  setHours(date: DateTime, hour: number): DateTime {\n    return date.set({ hour });\n  }\n\n  getMinutes(date: DateTime): number {\n    return date.minute;\n  }\n\n  setMinutes(date: DateTime, minute: number): DateTime {\n    return date.set({ minute });\n  }\n\n  getSeconds(date: DateTime): number {\n    return date.second;\n  }\n\n  setSeconds(date: DateTime, second: number, ms?: number): DateTime {\n    return date.set({ second, millisecond: ms });\n  }\n\n  getMilliseconds(date: DateTime): number {\n    return date.millisecond;\n  }\n\n  getDayOfWeek(date: DateTime): number {\n    return date.weekday === 7 ? 0 : date.weekday;\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    return Info.months(style, { locale: this.locale });\n  }\n\n  getDateNames(): string[] {\n    if (Info.features().intl) {\n      // At the time of writing, Luxon doesn't offer similar\n      // functionality so we have to fall back to the Intl API.\n      const dtf = new Intl.DateTimeFormat(this.locale, {\n        day: 'numeric',\n        timeZone: 'utc',\n      });\n\n      return range(31, (i) => {\n        // Format a UTC date in order to avoid DST issues.\n        const date = DateTime.utc(2017, 1, i + 1).toJSDate();\n\n        // Strip the directionality characters from the formatted date.\n        return dtf.format(date).replace(/[\\u200e\\u200f]/g, '');\n      });\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getHourNames(): string[] {\n    return DEFAULT_HOUR_NAMES;\n  }\n\n  getMinuteNames(): string[] {\n    return DEFAULT_MINUTE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    const luxonWeekdays = [...Info.weekdays(style, { locale: this.locale })];\n    // luxon returns the first day of week as Monday\n    // but angular material expects Sunday, so we rotate the array\n    luxonWeekdays.unshift(luxonWeekdays.pop()!);\n    return luxonWeekdays;\n  }\n\n  getYearName(date: DateTime): string {\n    return date.toFormat('yyyy');\n  }\n\n  getFirstDayOfWeek(): number {\n    // Luxon doesn't have support for getting the first day of the week.\n    if (this._getFirstDayOfWeek) {\n      return this._getFirstDayOfWeek(this.locale);\n    }\n    return 0;\n  }\n\n  getNumDaysInMonth(date: DateTime): number {\n    return date.daysInMonth;\n  }\n\n  clone(date: DateTime): DateTime {\n    return DateTime.fromObject(date.toObject({ includeConfig: true }));\n  }\n\n  createDate(\n    year: number,\n    month: number,\n    date: number,\n    hours: number = 0,\n    minutes: number = 0,\n    seconds: number = 0,\n    ms: number = 0\n  ): DateTime {\n    if (month < 0 || month > 11) {\n      throw Error(\n        `Invalid month index \"${month}\". Month index has to be between 0 and 11.`\n      );\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    // Luxon uses 1-indexed months so we need to add one to the month.\n    const result = this._useUTC\n      ? DateTime.utc(year, month + 1, date, hours, minutes, seconds, ms)\n      : DateTime.local(year, month + 1, date, hours, minutes, seconds, ms);\n\n    if (!this.isValid(result)) {\n      throw Error(`Invalid date \"${date}\". Reason: \"${result.invalidReason}\".`);\n    }\n\n    return result.setLocale(this.locale);\n  }\n\n  today(): DateTime {\n    return (this._useUTC ? DateTime.utc() : DateTime.local()).setLocale(\n      this.locale\n    );\n  }\n\n  parse(value: any, parseFormat: string | string[]): DateTime | null {\n    const options: DateTimeOptions = this._getOptions();\n\n    if (typeof value == 'string' && value.length > 0) {\n      const iso8601Date = DateTime.fromISO(value, options);\n\n      if (this.isValid(iso8601Date)) {\n        return iso8601Date;\n      }\n\n      const parseFormats = Array.isArray(parseFormat)\n        ? parseFormat\n        : [parseFormat];\n      for (const format of parseFormats) {\n        const fromFormat = DateTime.fromFormat(value, format, options);\n\n        if (this.isValid(fromFormat)) {\n          return fromFormat;\n        }\n      }\n\n      return this.invalid();\n    } else if (typeof value === 'number') {\n      return DateTime.fromMillis(value, options);\n    } else if (value instanceof Date) {\n      return DateTime.fromJSDate(value, options);\n    } else if (value instanceof DateTime) {\n      return DateTime.fromMillis(value.toMillis(), options);\n    }\n\n    return null;\n  }\n\n  format(date: DateTime, displayFormat: string): string {\n    if (!this.isValid(date)) {\n      throw Error('LuxonDateAdapter: Cannot format invalid date.');\n    }\n    return date\n      .setLocale(this.locale)\n      .toFormat(displayFormat, { timeZone: this._useUTC ? 'utc' : undefined });\n  }\n\n  addCalendarYears(date: DateTime, years: number): DateTime {\n    return date.plus({ years }).setLocale(this.locale);\n  }\n\n  addCalendarMonths(date: DateTime, months: number): DateTime {\n    return date.plus({ months }).setLocale(this.locale);\n  }\n\n  addCalendarDays(date: DateTime, days: number): DateTime {\n    return date.plus({ days }).setLocale(this.locale);\n  }\n\n  addCalendarHours(date: DateTime, hours: number): DateTime {\n    return date.plus({ hours });\n  }\n\n  addCalendarMinutes(date: DateTime, minutes: number): DateTime {\n    return date.plus({ minutes });\n  }\n\n  addCalendarSeconds(date: DateTime, seconds: number, ms?: number): DateTime {\n    return date.plus({ seconds, milliseconds: ms });\n  }\n\n  toIso8601(date: DateTime): string {\n    return date.toISO();\n  }\n\n  /**\n   * Returns the given value if given a valid Luxon or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) and valid Date objects into valid DateTime and empty\n   * string into null. Returns an invalid date for all other values.\n   */\n  deserialize(value: any): DateTime | null {\n    const options = this._getOptions();\n    let date;\n    if (value instanceof Date) {\n      date = DateTime.fromJSDate(value, options);\n    }\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      date = DateTime.fromISO(value, options);\n    }\n    if (date && this.isValid(date)) {\n      return date;\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any): boolean {\n    return obj instanceof DateTime;\n  }\n\n  isValid(date: DateTime): boolean {\n    return date.isValid;\n  }\n\n  invalid(): DateTime {\n    return DateTime.invalid('Invalid Luxon DateTime object.');\n  }\n\n  /** Gets the options that should be used when constructing a new `DateTime` object. */\n  private _getOptions(): DateTimeOptions {\n    return {\n      zone: this._useUTC ? 'utc' : undefined,\n      locale: this.locale,\n    };\n  }\n}\n"]}