{"version":3,"file":"calendar.js","sourceRoot":"","sources":["../../../../../libs/datepicker/src/lib/calendar.ts","../../../../../libs/datepicker/src/lib/mat-header.html","../../../../../libs/datepicker/src/lib/calendar.html"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  HostBinding,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n  isDevMode,\n} from '@angular/core';\nimport {MAT_DATE_FORMATS, ThemePalette} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {\n  DateAdapter,\n  DateUnit,\n  MatDateFormats,\n} from '@matheo/datepicker/core';\nimport {MatCalendarUserEvent, MatCalendarCellClassFunction} from './calendar-body';\nimport {MatCalendarType, MatCalendarView} from './calendar.types';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {DateFilterFn} from './datepicker-input-base';\nimport {MatClockView} from './clock-view';\nimport {MatMonthView} from './month-view';\nimport {\n  getActiveOffset,\n  isSameMultiYearView,\n  MatMultiYearView,\n} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER, DateRange} from './date-selection-model';\n\n/** Counter used to generate unique IDs. */\nlet uniqueId = 0;\n\n/** Default header for MatCalendar */\n@Component({\n  selector: 'mat-custom-header',\n  templateUrl: 'mat-header.html',\n  styleUrls: ['./mat-header.scss'],\n  exportAs: 'matCalendarHeader',\n  animations: [matDatepickerAnimations.controlActive],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  _buttonDescriptionId = `mat-calendar-button-${uniqueId++}`;\n\n  @HostBinding('class')\n  get getCssClasses(): string {\n    const cssClasses: string[] = [`type-${this.calendar.type}`];\n    if (this.calendar.color) {\n      cssClasses.push(`mat-${this.calendar.color}`);\n    }\n    return cssClasses.join(' ');\n  }\n\n  _yearButtonText: string;\n  _monthButtonText: string;\n  _monthdayButtonText: string;\n  _dayButtonText: string;\n  _hourButtonText: string;\n  _minuteButtonText: string;\n  _isAM: boolean;\n\n  constructor(public _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private changeDetectorRef: ChangeDetectorRef) {\n\n    this.updateValues();\n    this.calendar.stateChanges.subscribe(() => this.updateValues());\n  }\n\n  updateValues() {\n    const activeDate = this.calendar.getDate();\n\n    const day = this._dateAdapter.getDayOfWeek(activeDate);\n    let hours = this._dateAdapter.getHours(activeDate);\n    this._isAM = hours < 12;\n    if (this.calendar.twelveHour) {\n      hours = hours === 0 ? 12 : hours > 12 ? hours - 12 : hours;\n    }\n    const minutes = this._dateAdapter.getMinutes(activeDate);\n\n    this._yearButtonText = this._dateAdapter.getYear(activeDate).toString();\n    this._monthButtonText = this._dateAdapter.format(activeDate,\n      this._dateFormats.display.monthLabel);\n    this._monthdayButtonText = this._dateAdapter.format(activeDate,\n      this._dateFormats.display.monthDayLabel);\n    this._dayButtonText = this._dateAdapter.getDayOfWeekNames('short')[day];\n    this._hourButtonText = hours.toString();\n    this._minuteButtonText = ('00' + minutes).slice(-2);\n\n    this.changeDetectorRef.markForCheck();\n  }\n\n  hasPrevNextBlock(): boolean {\n    return !['hour', 'minute'].includes(this.calendar.currentView);\n  }\n\n  isControlActive(views: MatCalendarView[]): boolean {\n    return views.includes(this.calendar.currentView);\n  }\n\n  switchToView(view: MatCalendarView): void {\n    this.calendar.currentView = view;\n  }\n\n  toggleAmPm(am): void {\n    if (this._isAM !== am) {\n      this.calendar.setDate(this._dateAdapter.addCalendarHours(\n        this.calendar.getDate(), this._isAM ? 12 : -12));\n    }\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n\n    // The offset from the active year to the \"slot\" for the starting year is the\n    // *actual* first rendered year in the multi-year view, and the last year is\n    // just yearsPerPage - 1 away.\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const minYearOfPage = activeYear - getActiveOffset(\n      this._dateAdapter, this.calendar.activeDate, this.calendar.minDate, this.calendar.maxDate, this.calendar.yearsPerPage);\n    const maxYearOfPage = minYearOfPage + this.calendar.yearsPerPage - 1;\n    const minYearName =\n      this._dateAdapter.getYearName(this._dateAdapter.createDate(minYearOfPage, 0, 1));\n    const maxYearName =\n      this._dateAdapter.getYearName(this._dateAdapter.createDate(maxYearOfPage, 0, 1));\n    return this._intl.formatYearRange(minYearName, maxYearName);\n  }\n\n  get monthdayButtonLabel(): string {\n    return this.calendar.currentView == 'month'\n      ? this._intl.switchToYearViewLabel\n      : this._intl.switchToMonthViewLabel;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month'\n      ? this._intl.switchToMultiYearViewLabel\n      : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  monthdayClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'year' : 'month';\n  }\n\n  currentPeriodDisabled(): boolean {\n    return ['year', 'month'].includes(this.calendar.type);\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    const date = this.calendar.currentView == 'month'\n      ? this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1)\n      : this._dateAdapter.addCalendarYears(\n          this.calendar.activeDate,\n          this.calendar.currentView == 'year' ? -1 : -this.calendar.yearsPerPage\n        );\n\n    this.calendar.setDate(date);\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    const date = this.calendar.currentView == 'month'\n      ? this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1)\n      : this._dateAdapter.addCalendarYears(\n          this.calendar.activeDate,\n          this.calendar.currentView == 'year' ? 1 : this.calendar.yearsPerPage\n        );\n\n    this.calendar.setDate(date);\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return isSameMultiYearView(\n      this._dateAdapter, date1, date2, this.calendar.minDate, this.calendar.maxDate, this.calendar.yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.scss'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER]\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  @Input() color: ThemePalette;\n\n  /** The type of value handled by the calendar. */\n  @HostBinding('class')\n  @Input() type: MatCalendarType = 'date';\n\n  /** Whether the calendar should be started in. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** multi-year inputs */\n  @Input() yearsPerPage = 24;\n\n  @Input() yearsPerRow = 4;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): DateRange<D> | D | null { return this._selected; }\n  set selected(value: DateRange<D> | D | null) {\n    if (value instanceof DateRange) {\n      this._selected = value;\n    } else {\n      this._selected = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n  }\n  private _selected: DateRange<D> | D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: DateFilterFn<D>;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: MatCalendarCellClassFunction<D>;\n\n  /** Clock interval */\n  @Input() clockStep: number = 1;\n\n  /** Clock hour format */\n  @Input() twelveHour: Boolean = false;\n\n  /** Start of the comparison range. */\n  @Input() comparisonStart: D | null;\n\n  /** End of the comparison range. */\n  @Input() comparisonEnd: D | null;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits when the date changes.\n   */\n  @Output() readonly dateChanged = new EventEmitter<D>();\n\n  /**\n   * Emits when the current view changes.\n   */\n  @Output() readonly viewChanged: EventEmitter<MatCalendarView> =\n    new EventEmitter<MatCalendarView>(true);\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<MatCalendarUserEvent<D | null>> =\n      new EventEmitter<MatCalendarUserEvent<D | null>>();\n\n  /** Reference to the current clock view component. */\n  @ViewChild(MatClockView) clockView: MatClockView<D>;\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n    this._changeDetectorRef.markForCheck();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    const viewChangedResult = this._currentView !== value ? value : null;\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n    this._changeDetectorRef.markForCheck();\n    if (viewChangedResult) {\n      this.viewChanged.emit(viewChangedResult);\n    }\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (isDevMode()) {\n      if (!this._dateAdapter) {\n        throw createMissingDateImplError('DateAdapter');\n      }\n\n      if (!this._dateFormats) {\n        throw createMissingDateImplError('MAT_DATE_FORMATS');\n      }\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView =\n      this.type === 'year'\n        ? 'multi-year'\n        : this.type === 'month'\n          ? 'year'\n          : this.type === 'time' && !['hour', 'minute'].includes(this.startView)\n            ? 'hour'\n            : this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change =\n        changes['minDate'] || changes['maxDate'] || changes['dateFilter'];\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell(false);\n  }\n\n  hasOutput(type: MatCalendarType): boolean {\n    return this.type.indexOf(type) !== -1;\n  }\n\n  getDate(): D {\n    return !this.selected || this.selected instanceof DateRange\n      ? this.activeDate\n      : this.selected;\n  }\n\n  getUnit(): DateUnit {\n    switch (this.type) {\n      case 'date':\n        return 'day';\n      case 'datetime':\n      case 'time':\n        return 'minute';\n      default:\n        return this.type;\n    }\n  }\n\n  setDate(date: D): void {\n    if (!(this.selected instanceof DateRange)) {\n      this.selected = date;\n    }\n    this.activeDate = date;\n\n    this.dateChanged.emit(date);\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    const currentView = this.currentView;\n    let view: MatClockView<D> | MatMonthView<D> | MatYearView<D> | MatMultiYearView<D>;\n\n    if (currentView === 'month') {\n      view = this.monthView;\n    } else if (currentView === 'year') {\n      view = this.yearView;\n    } else if (currentView === 'multi-year') {\n      view = this.multiYearView;\n    } else {\n      view = this.clockView;\n    }\n\n    view._init();\n  }\n\n  /** Handles date selection. */\n  _dateSelected(event: MatCalendarUserEvent<D | null>): void {\n    const date = event.value;\n\n    if (this.selected instanceof DateRange ||\n        (date && !this._dateAdapter.sameDate(date, this.selected, this.getUnit()))) {\n      this.selectedChange.emit(date);\n    }\n\n    this._userSelection.emit(event);\n  }\n\n  _dateEmit(value: D) {\n    this.setDate(value);\n    this._userSelection.emit({ value, event: null });\n  }\n\n  /** Handles date selection in the clock view. */\n  _hourSelectedInClockView(date: D): void {\n    this.setDate(date);\n    this.selectedChange.emit(date);\n  }\n\n  _timeSelectedInClockView(event: MatCalendarUserEvent<D | null>): void {\n    this.setDate(event.value);\n    this.selectedChange.emit(event.value);\n    this._userSelection.emit(event);\n  }\n\n  /** Handles user day selection. */\n  _daySelected(event: MatCalendarUserEvent<D | null>): void {\n    if (!this.hasOutput('time') || this.selected instanceof DateRange) {\n      this.setDate(event.value);\n      this._dateSelected(event);\n    } else {\n      this.selectedChange.emit(event.value);\n      this._goToDateInView(event.value,  'hour');\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: MatCalendarView): void {\n    this.setDate(date);\n    this.currentView = view;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.clockView || this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","<div class=\"mat-custom-header\">\n  <div class=\"mat-custom-controls\">\n\n    <div class=\"mat-custom-date\" *ngIf=\"calendar.type === 'year'\">\n      <button mat-button type=\"button\" class=\"mat-custom-date-year mat-custom-control\"\n      (click)=\"switchToView('multi-year')\"\n      [@controlActive]=\"isControlActive(['multi-year']) ? 'active' : ''\"\n      [class.mat-custom-control-active]=\"isControlActive(['multi-year'])\"\n      [attr.aria-label]=\"_intl.switchToMultiYearViewLabel\">\n        <span>{{ _yearButtonText }}</span>\n      </button>\n    </div>\n\n    <div class=\"mat-custom-date\" *ngIf=\"calendar.type === 'month'\">\n      <button mat-button type=\"button\" class=\"mat-custom-date-month mat-custom-control\"\n      (click)=\"switchToView('year')\"\n      [@controlActive]=\"isControlActive(['year']) ? 'active' : ''\"\n      [class.mat-custom-control-active]=\"isControlActive(['year'])\"\n      [attr.aria-label]=\"_intl.switchToYearViewLabel\">\n        <span>{{ _monthButtonText }}</span>\n      </button>\n\n      <button mat-button type=\"button\" class=\"mat-custom-date-year mat-custom-control\"\n      (click)=\"switchToView('multi-year')\"\n      [@controlActive]=\"isControlActive(['multi-year']) ? 'active' : ''\"\n      [class.mat-custom-control-active]=\"isControlActive(['multi-year'])\"\n      [attr.aria-label]=\"_intl.switchToMultiYearViewLabel\">\n        <span>{{ _yearButtonText }}</span>\n      </button>\n    </div>\n\n    <div class=\"mat-custom-date\" *ngIf=\"calendar.hasOutput('date')\">\n      <button mat-button type=\"button\" class=\"mat-custom-date-year mat-custom-control\"\n      (click)=\"switchToView('multi-year')\"\n      [@controlActive]=\"isControlActive(['multi-year']) ? 'active' : ''\"\n      [class.mat-custom-control-active]=\"isControlActive(['multi-year'])\"\n      [attr.aria-label]=\"_intl.switchToMultiYearViewLabel\">\n        <span>{{ _yearButtonText }}</span>\n      </button>\n\n      <button mat-button type=\"button\" class=\"mat-custom-date-monthday mat-custom-control\"\n      (click)=\"monthdayClicked()\"\n      [@controlActive]=\"isControlActive(['month', 'year']) ? 'active' : ''\"\n      [class.mat-custom-control-active]=\"isControlActive(['month', 'year'])\"\n      [attr.aria-label]=\"monthdayButtonLabel\">\n        <span class=\"mat-custom-date-year-dayname\">{{ _dayButtonText }}&nbsp;</span>\n        <span class=\"mat-custom-date-year-monthday\">{{ _monthdayButtonText }}</span>\n      </button>\n    </div>\n\n    <div class=\"mat-custom-time\" *ngIf=\"calendar.hasOutput('time')\">\n      <div class=\"mat-custom-time-hour\">\n        <button mat-button type=\"button\" class=\"mat-custom-time-hour mat-custom-control\"\n        (click)=\"switchToView('hour')\"\n        [@controlActive]=\"isControlActive(['hour']) ? 'active' : ''\"\n        [class.mat-custom-control-active]=\"isControlActive(['hour'])\"\n        [attr.aria-label]=\"_intl.switchToHourViewLabel\">\n          <span>{{ _hourButtonText }}</span>\n        </button>\n\n        <span class=\"mat-custom-separator\">:</span>\n\n        <button mat-button type=\"button\" class=\"mat-custom-time-minute mat-custom-control\"\n        [@controlActive]=\"isControlActive(['minute']) ? 'active' : ''\"\n        [class.mat-custom-control-active]=\"isControlActive(['minute'])\"\n        (click)=\"switchToView('minute')\"\n        [attr.aria-label]=\"_intl.switchToMinuteViewLabel\">\n          <span>{{ _minuteButtonText }}</span>\n        </button>\n\n      </div>\n      <div class=\"mat-custom-time-ampm\" *ngIf=\"calendar.twelveHour\">\n        <button mat-button type=\"button\" class=\"mat-calendar-control\"\n        [@controlActive]=\"_isAM ? 'active' : ''\"\n        [class.mat-custom-control-active]=\"_isAM\"\n        [attr.aria-label]=\"_intl.setToAMLabel\"\n        (click)=\"toggleAmPm(true)\">\n          AM\n        </button>\n        <button mat-button type=\"button\" class=\"mat-calendar-control\"\n        [@controlActive]=\"!_isAM ? 'active' : ''\"\n        [class.mat-custom-control-active]=\"!_isAM\"\n        [attr.aria-label]=\"_intl.setToPMLabel\"\n        (click)=\"toggleAmPm(false)\">\n          PM\n        </button>\n      </div>\n    </div>\n\n  </div>\n  <div class=\"mat-custom-prev-next\" *ngIf=\"hasPrevNextBlock()\">\n\n    <button mat-icon-button type=\"button\"\n            class=\"mat-calendar-previous-button\"\n            [disabled]=\"!previousEnabled()\"\n            (click)=\"previousClicked()\"\n            [attr.aria-label]=\"prevButtonLabel\">\n    </button>\n\n    <button mat-button type=\"button\" class=\"mat-custom-period mat-custom-control\"\n    disableRipple=\"true\"\n    (click)=\"currentPeriodClicked()\"\n    [disabled]=\"currentPeriodDisabled()\"\n    [attr.aria-label]=\"periodButtonLabel\">\n      <strong>{{ periodButtonText }}</strong>\n    </button>\n\n    <button mat-icon-button type=\"button\"\n            class=\"mat-calendar-next-button\"\n            [disabled]=\"!nextEnabled()\"\n            (click)=\"nextClicked()\"\n            [attr.aria-label]=\"nextButtonLabel\">\n    </button>\n\n  </div>\n</div>\n","<ng-template [cdkPortalOutlet]=\"_calendarHeaderPortal\"></ng-template>\n\n<div class=\"mat-calendar-content\" [ngSwitch]=\"currentView\" cdkMonitorSubtreeFocus tabindex=\"-1\">\n\n  <mat-clock-view\n      *ngSwitchDefault\n      [(activeDate)]=\"activeDate\"\n      [selected]=\"selected\"\n      [(currentView)]=\"currentView\"\n      [selected]=\"selected\"\n      [dateFilter]=\"dateFilter\"\n      [dateClass]=\"dateClass\"\n      [clockStep]=\"clockStep\"\n      [twelveHour]=\"twelveHour\"\n      (selectedChange)=\"setDate($event)\"\n      (hourSelected)=\"_hourSelectedInClockView($event)\"\n      (_userSelection)=\"_timeSelectedInClockView($event)\">\n  </mat-clock-view>\n\n  <mat-month-view\n      *ngSwitchCase=\"'month'\"\n      [(activeDate)]=\"activeDate\"\n      [selected]=\"selected\"\n      [dateFilter]=\"dateFilter\"\n      [maxDate]=\"maxDate\"\n      [minDate]=\"minDate\"\n      [dateClass]=\"dateClass\"\n      [comparisonStart]=\"comparisonStart\"\n      [comparisonEnd]=\"comparisonEnd\"\n      (_userSelection)=\"_daySelected($event)\">\n  </mat-month-view>\n\n  <mat-year-view\n      *ngSwitchCase=\"'year'\"\n      [(activeDate)]=\"activeDate\"\n      [selected]=\"selected\"\n      [dateFilter]=\"dateFilter\"\n      [maxDate]=\"maxDate\"\n      [minDate]=\"minDate\"\n      [dateClass]=\"dateClass\"\n      (monthSelected)=\"_monthSelectedInYearView($event)\"\n      (selectedChange)=\"hasOutput('month') ? _dateEmit($event) : _goToDateInView($event, 'month')\">\n  </mat-year-view>\n\n  <mat-multi-year-view\n      *ngSwitchCase=\"'multi-year'\"\n      [yearsPerPage]=\"yearsPerPage\"\n      [yearsPerRow]=\"yearsPerRow\"\n      [(activeDate)]=\"activeDate\"\n      [selected]=\"selected\"\n      [dateFilter]=\"dateFilter\"\n      [maxDate]=\"maxDate\"\n      [minDate]=\"minDate\"\n      [dateClass]=\"dateClass\"\n      (yearSelected)=\"_yearSelectedInMultiYearView($event)\"\n      (selectedChange)=\"hasOutput('year') ? _dateEmit($event) : _goToDateInView($event, 'year')\">\n  </mat-multi-year-view>\n</div>\n"]}