import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, HostListener, Inject, Input, Optional, Output, ViewEncapsulation, } from '@angular/core';
import { MAT_DATE_FORMATS } from '@angular/material/core';
import { DateAdapter, } from '@matheo/datepicker/core';
import { createMissingDateImplError } from './datepicker-errors';
import * as i0 from "@angular/core";
import * as i1 from "@matheo/datepicker/core";
import * as i2 from "@angular/common";
export const CLOCK_RADIUS = 50;
export const CLOCK_INNER_RADIUS = 27.5;
export const CLOCK_OUTER_RADIUS = 41.25;
export const CLOCK_TICK_RADIUS = 7.0833;
/**
 * A clock that is used as part of the datepicker.
 * @docs-private
 */
export class MatClockView {
    constructor(_changeDetectorRef, _element, _dateAdapter, _dateFormats) {
        this._changeDetectorRef = _changeDetectorRef;
        this._element = _element;
        this._dateAdapter = _dateAdapter;
        this._dateFormats = _dateFormats;
        this.clockStep = 1;
        this.twelveHour = false;
        this.currentViewChange = new EventEmitter();
        /** Emits when a new date is selected. */
        this.selectedChange = new EventEmitter();
        /** Emits when any date is selected. */
        this._userSelection = new EventEmitter();
        // Hours and Minutes representing the clock view.
        this._hours = [];
        this._minutes = [];
        if (!this._dateAdapter) {
            throw createMissingDateImplError('DateAdapter');
        }
        if (!this._dateFormats) {
            throw createMissingDateImplError('MAT_DATE_FORMATS');
        }
        this.mouseMoveListener = (event) => {
            this._handleMousemove(event);
        };
        this.mouseUpListener = () => {
            this._handleMouseup();
        };
    }
    /**
     * The time to display in this clock view. (the rest is ignored)
     */
    get activeDate() {
        return this._activeDate;
    }
    set activeDate(value) {
        const oldActiveDate = this._activeDate;
        const validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) ||
            this._dateAdapter.today();
        this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);
        if (oldActiveDate &&
            this._dateAdapter.compareDate(oldActiveDate, this._activeDate)) {
            this._init();
        }
    }
    // The currently selected date.
    get selected() {
        return this._selected;
    }
    set selected(value) {
        this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
    }
    /** The minimum selectable date. */
    get minDate() {
        return this._minDate;
    }
    set minDate(value) {
        this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
    }
    /** The maximum selectable date. */
    get maxDate() {
        return this._maxDate;
    }
    set maxDate(value) {
        this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
    }
    updateSize() {
        const { offsetWidth, offsetHeight } = this._element.nativeElement;
        this._size = (offsetWidth < offsetHeight ? offsetWidth : offsetHeight) * 0.9;
        this._changeDetectorRef.detectChanges();
    }
    get inHourView() {
        return this.currentView === 'hour';
    }
    get _hand() {
        this._selectedHour = this._dateAdapter.getHours(this.activeDate);
        this._selectedMinute = this._dateAdapter.getMinutes(this.activeDate);
        let radius = CLOCK_OUTER_RADIUS;
        let deg = 0;
        if (this.inHourView) {
            const outer = this.twelveHour || this._selectedHour >= 0 && this._selectedHour < 12;
            radius = outer ? CLOCK_OUTER_RADIUS : CLOCK_INNER_RADIUS;
            deg = Math.round(this._selectedHour * (360 / (24 / 2)));
        }
        else {
            deg = Math.round(this._selectedMinute * (360 / 60));
        }
        return {
            transform: `rotate(${deg}deg)`,
            height: `${radius}%`,
            'margin-top': `${50 - radius}%`,
            transition: this._draggingMouse ? 'none' : 'all 300ms ease',
        };
    }
    ngAfterViewInit() {
        this.updateSize();
    }
    ngAfterContentInit() {
        this._init();
    }
    // Handles mousedown events on the clock body.
    _handleMousedown(event) {
        this._draggingMouse = true;
        document.addEventListener('mousemove', this.mouseMoveListener);
        document.addEventListener('touchmove', this.mouseMoveListener);
        document.addEventListener('mouseup', this.mouseUpListener);
        document.addEventListener('touchend', this.mouseUpListener);
        this.setTime(event);
    }
    _handleMousemove(event) {
        event.preventDefault();
        this.setTime(event);
    }
    _handleMouseup() {
        this._draggingMouse = false;
        document.removeEventListener('mousemove', this.mouseMoveListener);
        document.removeEventListener('touchmove', this.mouseMoveListener);
        document.removeEventListener('mouseup', this.mouseUpListener);
        document.removeEventListener('touchend', this.mouseUpListener);
        if (this.dateFilter && !this.dateFilter(this.activeDate, this.currentView)) {
            return;
        }
        if (this.inHourView) {
            // we refresh the valid minutes
            this.currentViewChange.emit('minute');
            this.selectedChange.emit(this.activeDate);
            this._init();
        }
        else {
            this._userSelection.emit({ value: this.activeDate, event });
        }
    }
    // Initializes this clock view.
    _init() {
        this._hours.length = 0;
        this._minutes.length = 0;
        const hourNames = this._dateAdapter.getHourNames();
        const minuteNames = this._dateAdapter.getMinuteNames();
        if (this.twelveHour) {
            this._anteMeridian = this._dateAdapter.getHours(this.activeDate) < 12;
            for (let i = 0; i < hourNames.length / 2; i++) {
                const radian = (i / 6) * Math.PI;
                const radius = CLOCK_OUTER_RADIUS;
                const date = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), this._dateAdapter.getDate(this.activeDate), this._anteMeridian ? i : i + 12, 0, 0, 0);
                this._hours.push({
                    value: this._anteMeridian ? i : i + 12,
                    displayValue: i === 0 ? hourNames[12] : hourNames[i],
                    enabled: !this.dateFilter || this.dateFilter(date, 'hour'),
                    cssClasses: this.dateClass ? this.dateClass(date, 'hour') : undefined,
                    top: CLOCK_RADIUS - Math.cos(radian) * radius - CLOCK_TICK_RADIUS,
                    left: CLOCK_RADIUS + Math.sin(radian) * radius - CLOCK_TICK_RADIUS,
                });
            }
        }
        else {
            for (let i = 0; i < hourNames.length; i++) {
                const radian = (i / 6) * Math.PI;
                const outer = i > 0 && i < 13;
                const radius = outer ? CLOCK_OUTER_RADIUS : CLOCK_INNER_RADIUS;
                const hour = i % 12 ? i : (i === 0 ? 12 : 0);
                const date = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), this._dateAdapter.getDate(this.activeDate), hour, 0, 0, 0);
                this._hours.push({
                    value: hour,
                    displayValue: hourNames[hour],
                    enabled: !this.dateFilter || this.dateFilter(date, 'hour'),
                    cssClasses: this.dateClass ? this.dateClass(date, 'hour') : undefined,
                    top: CLOCK_RADIUS - Math.cos(radian) * radius - CLOCK_TICK_RADIUS,
                    left: CLOCK_RADIUS + Math.sin(radian) * radius - CLOCK_TICK_RADIUS,
                    fontSize: i > 0 && i < 13 ? '' : '80%',
                });
            }
        }
        for (let i = 0; i < minuteNames.length; i += 5) {
            const radian = (i / 30) * Math.PI;
            const date = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), this._dateAdapter.getDate(this.activeDate), this._dateAdapter.getHours(this.activeDate), i, 0, 0);
            this._minutes.push({
                value: i,
                displayValue: i === 0 ? '00' : minuteNames[i],
                enabled: !this.dateFilter || this.dateFilter(date, 'minute'),
                cssClasses: this.dateClass ? this.dateClass(date, 'minute') : undefined,
                top: CLOCK_RADIUS -
                    Math.cos(radian) * CLOCK_OUTER_RADIUS -
                    CLOCK_TICK_RADIUS,
                left: CLOCK_RADIUS +
                    Math.sin(radian) * CLOCK_OUTER_RADIUS -
                    CLOCK_TICK_RADIUS,
            });
        }
        this._changeDetectorRef.markForCheck();
    }
    // Set Time
    setTime(event) {
        const trigger = this._element.nativeElement;
        const triggerRect = trigger.getBoundingClientRect();
        const width = trigger.offsetWidth;
        const height = trigger.offsetHeight;
        const pageX = event.pageX !== undefined ? event.pageX : event.touches[0].pageX;
        const pageY = event.pageY !== undefined ? event.pageY : event.touches[0].pageY;
        const x = width / 2 - (pageX - triggerRect.left - window.pageXOffset);
        const y = height / 2 - (pageY - triggerRect.top - window.pageYOffset);
        const unit = Math.PI /
            (this.inHourView ? 6 : this.clockStep ? 30 / this.clockStep : 30);
        const z = Math.sqrt(x * x + y * y);
        const avg = (width * (CLOCK_OUTER_RADIUS / 100) + width * (CLOCK_INNER_RADIUS / 100)) / 2;
        const outer = this.inHourView && z > avg - 16 /* button radius */;
        let radian = Math.atan2(-x, y);
        if (radian < 0) {
            radian = Math.PI * 2 + radian;
        }
        let value = Math.round(radian / unit);
        let date = this._dateAdapter.clone(this.activeDate);
        if (this.inHourView) {
            if (value === 12) {
                value = 0;
            }
            value = this.twelveHour
                ? (this._anteMeridian ? value : value + 12)
                : (outer ? value : value + 12);
            date = this._dateAdapter.setHours(date, value);
        }
        else {
            if (this.clockStep) {
                value *= this.clockStep;
            }
            if (value === 60) {
                value = 0;
            }
            date = this._dateAdapter.setMinutes(date, value);
        }
        // validate if the resulting value is disabled and do not take action
        if (this.dateFilter && !this.dateFilter(date, this.currentView)) {
            return;
        }
        // we don't want to re-render the clock
        this._activeDate = date;
        this.selectedChange.emit(this.activeDate);
    }
    _focusActiveCell() { }
    /**
     * @param obj The object to check.
     * @returns The given object if it is both a date instance and valid, otherwise null.
     */
    _getValidDateOrNull(obj) {
        return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;
    }
}
/** @nocollapse */ MatClockView.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0, type: MatClockView, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i1.DateAdapter, optional: true }, { token: MAT_DATE_FORMATS, optional: true }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ MatClockView.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.13", type: MatClockView, selector: "mat-clock-view", inputs: { activeDate: "activeDate", selected: "selected", minDate: "minDate", maxDate: "maxDate", dateFilter: "dateFilter", dateClass: "dateClass", clockStep: "clockStep", twelveHour: "twelveHour", currentView: "currentView" }, outputs: { currentViewChange: "currentViewChange", selectedChange: "selectedChange", _userSelection: "_userSelection" }, host: { attributes: { "role": "clock" }, listeners: { "mousedown": "_handleMousedown($event)", "window:resize": "updateSize()" } }, exportAs: ["matClockView"], ngImport: i0, template: "<div class=\"mat-clock\" [style.width.px]=\"_size\" [style.height.px]=\"_size\">\n  <div class=\"mat-clock-center\"></div>\n  <div class=\"mat-clock-hand\" [ngStyle]=\"_hand\"></div>\n\n  <div class=\"mat-clock-hours\" [class.active]=\"inHourView\">\n    <div *ngFor=\"let item of _hours\"\n      class=\"mat-clock-cell\"\n      [ngClass]=\"item.cssClasses\"\n      [class.mat-clock-cell-selected]=\"_selectedHour == item.value\"\n      [class.mat-clock-cell-disabled]=\"!item.enabled\"\n      [style.top.%]=\"item.top\"\n      [style.left.%]=\"item.left\"\n      [style.fontSize]=\"item.fontSize\">\n      {{ item.displayValue }}\n    </div>\n  </div>\n\n  <div class=\"mat-clock-minutes\" [class.active]=\"!inHourView\">\n    <div *ngFor=\"let item of _minutes\"\n      class=\"mat-clock-cell\"\n      [ngClass]=\"item.cssClasses\"\n      [class.mat-clock-cell-selected]=\"_selectedMinute == item.value\"\n      [class.mat-clock-cell-disabled]=\"!item.enabled\"\n      [style.top.%]=\"item.top\"\n      [style.left.%]=\"item.left\">\n      {{ item.displayValue }}\n    </div>\n  </div>\n</div>\n", directives: [{ type: i2.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0, type: MatClockView, decorators: [{
            type: Component,
            args: [{
                    selector: 'mat-clock-view',
                    templateUrl: 'clock-view.html',
                    exportAs: 'matClockView',
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        role: 'clock',
                        '(mousedown)': '_handleMousedown($event)'
                    },
                    preserveWhitespaces: false
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i1.DateAdapter, decorators: [{
                    type: Optional
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [MAT_DATE_FORMATS]
                }] }]; }, propDecorators: { activeDate: [{
                type: Input
            }], selected: [{
                type: Input
            }], minDate: [{
                type: Input
            }], maxDate: [{
                type: Input
            }], dateFilter: [{
                type: Input
            }], dateClass: [{
                type: Input
            }], clockStep: [{
                type: Input
            }], twelveHour: [{
                type: Input
            }], currentView: [{
                type: Input
            }], currentViewChange: [{
                type: Output
            }], selectedChange: [{
                type: Output
            }], _userSelection: [{
                type: Output
            }], updateSize: [{
                type: HostListener,
                args: ['window:resize']
            }] } });
//# sourceMappingURL=clock-view.js.map