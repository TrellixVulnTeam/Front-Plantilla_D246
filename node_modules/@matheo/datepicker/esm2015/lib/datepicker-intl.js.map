{"version":3,"file":"datepicker-intl.js","sourceRoot":"","sources":["../../../../../libs/datepicker/src/lib/datepicker-intl.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAC,UAAU,EAAC,MAAM,eAAe,CAAC;AACzC,OAAO,EAAC,OAAO,EAAC,MAAM,MAAM,CAAC;;AAG7B,0DAA0D;AAE1D,MAAM,OAAO,iBAAiB;IAD9B;QAEE;;;WAGG;QACM,YAAO,GAAkB,IAAI,OAAO,EAAQ,CAAC;QAEtD,+DAA+D;QAC/D,kBAAa,GAAW,UAAU,CAAC;QAEnC,uFAAuF;QACvF,sBAAiB,GAAW,eAAe,CAAC;QAE5C,6DAA6D;QAC7D,uBAAkB,GAAW,gBAAgB,CAAC;QAE9C,sEAAsE;QACtE,mBAAc,GAAW,gBAAgB,CAAC;QAE1C,kEAAkE;QAClE,mBAAc,GAAW,YAAY,CAAC;QAEtC,qEAAqE;QACrE,kBAAa,GAAW,eAAe,CAAC;QAExC,iEAAiE;QACjE,kBAAa,GAAW,WAAW,CAAC;QAEpC,2EAA2E;QAC3E,uBAAkB,GAAW,mBAAmB,CAAC;QAEjD,uEAAuE;QACvE,uBAAkB,GAAW,eAAe,CAAC;QAE7C,4DAA4D;QAC5D,iBAAY,GAAG,gBAAgB,CAAC;QAEhC,4DAA4D;QAC5D,iBAAY,GAAG,gBAAgB,CAAC;QAEhC,+EAA+E;QAC/E,4BAAuB,GAAG,uBAAuB,CAAC;QAElD,6EAA6E;QAC7E,0BAAqB,GAAG,qBAAqB,CAAC;QAE9C,8EAA8E;QAC9E,2BAAsB,GAAG,sBAAsB,CAAC;QAEhD,6EAA6E;QAC7E,0BAAqB,GAAG,qBAAqB,CAAC;QAE9C,8EAA8E;QAC9E,+BAA0B,GAAG,sBAAsB,CAAC;KAMrD;IAJC,gCAAgC;IAChC,eAAe,CAAC,KAAa,EAAE,GAAW;QACxC,OAAO,GAAG,KAAK,WAAW,GAAG,EAAE,CAAC;IAClC,CAAC;;kIA1DU,iBAAiB;sIAAjB,iBAAiB,cADL,MAAM;4FAClB,iBAAiB;kBAD7B,UAAU;mBAAC,EAAC,UAAU,EAAE,MAAM,EAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** Label for the button used to close the calendar popup. */\n  closeCalendarLabel: string = 'Close calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'AM' button (used by screen readers). */\n  setToAMLabel = 'Set date to AM';\n\n  /** A label for the 'PM' button (used by screen readers). */\n  setToPMLabel = 'Set date to PM';\n\n  /** A label for the 'switch to minute view' button (used by screen readers). */\n  switchToMinuteViewLabel = 'Change to minute view';\n\n  /** A label for the 'switch to hour view' button (used by screen readers). */\n  switchToHourViewLabel = 'Change to hour view';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel = 'Change to month view';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToYearViewLabel = 'Change to year view';\n\n  /** A label for the 'switch to years view' button (used by screen readers). */\n  switchToMultiYearViewLabel = 'Change to years view';\n\n  /** Formats a range of years. */\n  formatYearRange(start: string, end: string): string {\n    return `${start} \\u2013 ${end}`;\n  }\n}\n"]}