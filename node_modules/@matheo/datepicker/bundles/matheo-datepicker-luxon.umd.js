(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/material/core'), require('@matheo/datepicker/core'), require('luxon')) :
    typeof define === 'function' && define.amd ? define('@matheo/datepicker/luxon', ['exports', '@angular/core', '@angular/material/core', '@matheo/datepicker/core', 'luxon'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.matheo = global.matheo || {}, global.matheo.datepicker = global.matheo.datepicker || {}, global.matheo.datepicker.luxon = {}), global.ng.core, global.ng.material.core, global.matheo.datepicker.core, global.luxon));
})(this, (function (exports, i0, core$1, core, luxon) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    /** InjectionToken for LuxonDateAdapter to configure options. */
    var MAT_LUXON_DATE_ADAPTER_OPTIONS = new i0.InjectionToken('MAT_LUXON_DATE_ADAPTER_OPTIONS', {
        providedIn: 'root',
        factory: MAT_LUXON_DATE_ADAPTER_OPTIONS_FACTORY,
    });
    /** @docs-private */
    function MAT_LUXON_DATE_ADAPTER_OPTIONS_FACTORY() {
        return {
            useUtc: false,
        };
    }
    /** The default date names to use if Intl API is not available. */
    var DEFAULT_DATE_NAMES = range(31, function (i) { return String(i + 1); });
    /** The default hour names to use if Intl API is not available. */
    var DEFAULT_HOUR_NAMES = range(24, function (i) { return (i === 0 ? '00' : String(i)); });
    /** The default minute names to use if Intl API is not available. */
    var DEFAULT_MINUTE_NAMES = range(60, String);
    /** Creates an array and fills it with values. */
    function range(length, valueFunction) {
        var valuesArray = Array(length);
        for (var i = 0; i < length; i++) {
            valuesArray[i] = valueFunction(i);
        }
        return valuesArray;
    }
    /** Adapts Luxon Dates for use with Angular Material. */
    var LuxonDateAdapter = /** @class */ (function (_super) {
        __extends(LuxonDateAdapter, _super);
        function LuxonDateAdapter(dateLocale, options) {
            var _this = _super.call(this) || this;
            _this._useUTC = options ? !!options.useUtc : false;
            _this._getFirstDayOfWeek = options === null || options === void 0 ? void 0 : options.firstDayOfWeek;
            _this.setLocale(dateLocale || luxon.DateTime.local().locale);
            return _this;
        }
        LuxonDateAdapter.prototype.setLocale = function (locale) {
            _super.prototype.setLocale.call(this, locale);
        };
        LuxonDateAdapter.prototype.getYear = function (date) {
            return date.year;
        };
        LuxonDateAdapter.prototype.getMonth = function (date) {
            // Luxon works with 1-indexed months whereas our code expects 0-indexed.
            return date.month - 1;
        };
        LuxonDateAdapter.prototype.getDate = function (date) {
            return date.day;
        };
        LuxonDateAdapter.prototype.getHours = function (date) {
            return date.hour;
        };
        LuxonDateAdapter.prototype.setHours = function (date, hour) {
            return date.set({ hour: hour });
        };
        LuxonDateAdapter.prototype.getMinutes = function (date) {
            return date.minute;
        };
        LuxonDateAdapter.prototype.setMinutes = function (date, minute) {
            return date.set({ minute: minute });
        };
        LuxonDateAdapter.prototype.getSeconds = function (date) {
            return date.second;
        };
        LuxonDateAdapter.prototype.setSeconds = function (date, second, ms) {
            return date.set({ second: second, millisecond: ms });
        };
        LuxonDateAdapter.prototype.getMilliseconds = function (date) {
            return date.millisecond;
        };
        LuxonDateAdapter.prototype.getDayOfWeek = function (date) {
            return date.weekday === 7 ? 0 : date.weekday;
        };
        LuxonDateAdapter.prototype.getMonthNames = function (style) {
            return luxon.Info.months(style, { locale: this.locale });
        };
        LuxonDateAdapter.prototype.getDateNames = function () {
            if (luxon.Info.features().intl) {
                // At the time of writing, Luxon doesn't offer similar
                // functionality so we have to fall back to the Intl API.
                var dtf_1 = new Intl.DateTimeFormat(this.locale, {
                    day: 'numeric',
                    timeZone: 'utc',
                });
                return range(31, function (i) {
                    // Format a UTC date in order to avoid DST issues.
                    var date = luxon.DateTime.utc(2017, 1, i + 1).toJSDate();
                    // Strip the directionality characters from the formatted date.
                    return dtf_1.format(date).replace(/[\u200e\u200f]/g, '');
                });
            }
            return DEFAULT_DATE_NAMES;
        };
        LuxonDateAdapter.prototype.getHourNames = function () {
            return DEFAULT_HOUR_NAMES;
        };
        LuxonDateAdapter.prototype.getMinuteNames = function () {
            return DEFAULT_MINUTE_NAMES;
        };
        LuxonDateAdapter.prototype.getDayOfWeekNames = function (style) {
            var luxonWeekdays = __spreadArray([], __read(luxon.Info.weekdays(style, { locale: this.locale })));
            // luxon returns the first day of week as Monday
            // but angular material expects Sunday, so we rotate the array
            luxonWeekdays.unshift(luxonWeekdays.pop());
            return luxonWeekdays;
        };
        LuxonDateAdapter.prototype.getYearName = function (date) {
            return date.toFormat('yyyy');
        };
        LuxonDateAdapter.prototype.getFirstDayOfWeek = function () {
            // Luxon doesn't have support for getting the first day of the week.
            if (this._getFirstDayOfWeek) {
                return this._getFirstDayOfWeek(this.locale);
            }
            return 0;
        };
        LuxonDateAdapter.prototype.getNumDaysInMonth = function (date) {
            return date.daysInMonth;
        };
        LuxonDateAdapter.prototype.clone = function (date) {
            return luxon.DateTime.fromObject(date.toObject({ includeConfig: true }));
        };
        LuxonDateAdapter.prototype.createDate = function (year, month, date, hours, minutes, seconds, ms) {
            if (hours === void 0) { hours = 0; }
            if (minutes === void 0) { minutes = 0; }
            if (seconds === void 0) { seconds = 0; }
            if (ms === void 0) { ms = 0; }
            if (month < 0 || month > 11) {
                throw Error("Invalid month index \"" + month + "\". Month index has to be between 0 and 11.");
            }
            if (date < 1) {
                throw Error("Invalid date \"" + date + "\". Date has to be greater than 0.");
            }
            // Luxon uses 1-indexed months so we need to add one to the month.
            var result = this._useUTC
                ? luxon.DateTime.utc(year, month + 1, date, hours, minutes, seconds, ms)
                : luxon.DateTime.local(year, month + 1, date, hours, minutes, seconds, ms);
            if (!this.isValid(result)) {
                throw Error("Invalid date \"" + date + "\". Reason: \"" + result.invalidReason + "\".");
            }
            return result.setLocale(this.locale);
        };
        LuxonDateAdapter.prototype.today = function () {
            return (this._useUTC ? luxon.DateTime.utc() : luxon.DateTime.local()).setLocale(this.locale);
        };
        LuxonDateAdapter.prototype.parse = function (value, parseFormat) {
            var e_1, _a;
            var options = this._getOptions();
            if (typeof value == 'string' && value.length > 0) {
                var iso8601Date = luxon.DateTime.fromISO(value, options);
                if (this.isValid(iso8601Date)) {
                    return iso8601Date;
                }
                var parseFormats = Array.isArray(parseFormat)
                    ? parseFormat
                    : [parseFormat];
                try {
                    for (var parseFormats_1 = __values(parseFormats), parseFormats_1_1 = parseFormats_1.next(); !parseFormats_1_1.done; parseFormats_1_1 = parseFormats_1.next()) {
                        var format = parseFormats_1_1.value;
                        var fromFormat = luxon.DateTime.fromFormat(value, format, options);
                        if (this.isValid(fromFormat)) {
                            return fromFormat;
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (parseFormats_1_1 && !parseFormats_1_1.done && (_a = parseFormats_1.return)) _a.call(parseFormats_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                return this.invalid();
            }
            else if (typeof value === 'number') {
                return luxon.DateTime.fromMillis(value, options);
            }
            else if (value instanceof Date) {
                return luxon.DateTime.fromJSDate(value, options);
            }
            else if (value instanceof luxon.DateTime) {
                return luxon.DateTime.fromMillis(value.toMillis(), options);
            }
            return null;
        };
        LuxonDateAdapter.prototype.format = function (date, displayFormat) {
            if (!this.isValid(date)) {
                throw Error('LuxonDateAdapter: Cannot format invalid date.');
            }
            return date
                .setLocale(this.locale)
                .toFormat(displayFormat, { timeZone: this._useUTC ? 'utc' : undefined });
        };
        LuxonDateAdapter.prototype.addCalendarYears = function (date, years) {
            return date.plus({ years: years }).setLocale(this.locale);
        };
        LuxonDateAdapter.prototype.addCalendarMonths = function (date, months) {
            return date.plus({ months: months }).setLocale(this.locale);
        };
        LuxonDateAdapter.prototype.addCalendarDays = function (date, days) {
            return date.plus({ days: days }).setLocale(this.locale);
        };
        LuxonDateAdapter.prototype.addCalendarHours = function (date, hours) {
            return date.plus({ hours: hours });
        };
        LuxonDateAdapter.prototype.addCalendarMinutes = function (date, minutes) {
            return date.plus({ minutes: minutes });
        };
        LuxonDateAdapter.prototype.addCalendarSeconds = function (date, seconds, ms) {
            return date.plus({ seconds: seconds, milliseconds: ms });
        };
        LuxonDateAdapter.prototype.toIso8601 = function (date) {
            return date.toISO();
        };
        /**
         * Returns the given value if given a valid Luxon or null. Deserializes valid ISO 8601 strings
         * (https://www.ietf.org/rfc/rfc3339.txt) and valid Date objects into valid DateTime and empty
         * string into null. Returns an invalid date for all other values.
         */
        LuxonDateAdapter.prototype.deserialize = function (value) {
            var options = this._getOptions();
            var date;
            if (value instanceof Date) {
                date = luxon.DateTime.fromJSDate(value, options);
            }
            if (typeof value === 'string') {
                if (!value) {
                    return null;
                }
                date = luxon.DateTime.fromISO(value, options);
            }
            if (date && this.isValid(date)) {
                return date;
            }
            return _super.prototype.deserialize.call(this, value);
        };
        LuxonDateAdapter.prototype.isDateInstance = function (obj) {
            return obj instanceof luxon.DateTime;
        };
        LuxonDateAdapter.prototype.isValid = function (date) {
            return date.isValid;
        };
        LuxonDateAdapter.prototype.invalid = function () {
            return luxon.DateTime.invalid('Invalid Luxon DateTime object.');
        };
        /** Gets the options that should be used when constructing a new `DateTime` object. */
        LuxonDateAdapter.prototype._getOptions = function () {
            return {
                zone: this._useUTC ? 'utc' : undefined,
                locale: this.locale,
            };
        };
        return LuxonDateAdapter;
    }(core.DateAdapter));
    /** @nocollapse */ LuxonDateAdapter.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0__namespace, type: LuxonDateAdapter, deps: [{ token: core$1.MAT_DATE_LOCALE, optional: true }, { token: MAT_LUXON_DATE_ADAPTER_OPTIONS, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ LuxonDateAdapter.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0__namespace, type: LuxonDateAdapter });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0__namespace, type: LuxonDateAdapter, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [core$1.MAT_DATE_LOCALE]
                        }] }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [MAT_LUXON_DATE_ADAPTER_OPTIONS]
                        }] }];
        } });

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var MAT_LUXON_DATE_FORMATS = {
        parse: {
            dateInput: 'D',
            datetimeInput: 'f',
            timeInput: 'h:mm',
            monthInput: 'LLL',
            yearInput: 'yyyy',
        },
        display: {
            dateInput: 'D',
            datetimeInput: 'f',
            timeInput: 'T',
            monthInput: 'LLL yyyy',
            yearInput: 'yyyy',
            dateA11yLabel: 'DD',
            monthLabel: 'LLL',
            monthDayLabel: 'LLL d',
            monthDayA11yLabel: 'LLLL d',
            monthYearLabel: 'LLL yyyy',
            monthYearA11yLabel: 'LLLL yyyy',
            timeLabel: 'T',
        },
    };

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var LuxonDateModule = /** @class */ (function () {
        function LuxonDateModule() {
        }
        return LuxonDateModule;
    }());
    /** @nocollapse */ LuxonDateModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0__namespace, type: LuxonDateModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ LuxonDateModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0__namespace, type: LuxonDateModule });
    /** @nocollapse */ LuxonDateModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0__namespace, type: LuxonDateModule, providers: [
            {
                provide: core.DateAdapter,
                useClass: LuxonDateAdapter,
                deps: [core$1.MAT_DATE_LOCALE, MAT_LUXON_DATE_ADAPTER_OPTIONS],
            },
            {
                provide: core$1.DateAdapter,
                useClass: LuxonDateAdapter,
                deps: [core$1.MAT_DATE_LOCALE, MAT_LUXON_DATE_ADAPTER_OPTIONS],
            },
        ] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0__namespace, type: LuxonDateModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        providers: [
                            {
                                provide: core.DateAdapter,
                                useClass: LuxonDateAdapter,
                                deps: [core$1.MAT_DATE_LOCALE, MAT_LUXON_DATE_ADAPTER_OPTIONS],
                            },
                            {
                                provide: core$1.DateAdapter,
                                useClass: LuxonDateAdapter,
                                deps: [core$1.MAT_DATE_LOCALE, MAT_LUXON_DATE_ADAPTER_OPTIONS],
                            },
                        ],
                    }]
            }] });
    var MatLuxonDateModule = /** @class */ (function () {
        function MatLuxonDateModule() {
        }
        return MatLuxonDateModule;
    }());
    /** @nocollapse */ MatLuxonDateModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0__namespace, type: MatLuxonDateModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ MatLuxonDateModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0__namespace, type: MatLuxonDateModule, imports: [LuxonDateModule] });
    /** @nocollapse */ MatLuxonDateModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0__namespace, type: MatLuxonDateModule, providers: [{ provide: core$1.MAT_DATE_FORMATS, useValue: MAT_LUXON_DATE_FORMATS }], imports: [[LuxonDateModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0__namespace, type: MatLuxonDateModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [LuxonDateModule],
                        providers: [{ provide: core$1.MAT_DATE_FORMATS, useValue: MAT_LUXON_DATE_FORMATS }],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.LuxonDateAdapter = LuxonDateAdapter;
    exports.LuxonDateModule = LuxonDateModule;
    exports.MAT_LUXON_DATE_ADAPTER_OPTIONS = MAT_LUXON_DATE_ADAPTER_OPTIONS;
    exports.MAT_LUXON_DATE_ADAPTER_OPTIONS_FACTORY = MAT_LUXON_DATE_ADAPTER_OPTIONS_FACTORY;
    exports.MAT_LUXON_DATE_FORMATS = MAT_LUXON_DATE_FORMATS;
    exports.MatLuxonDateModule = MatLuxonDateModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=matheo-datepicker-luxon.umd.js.map
