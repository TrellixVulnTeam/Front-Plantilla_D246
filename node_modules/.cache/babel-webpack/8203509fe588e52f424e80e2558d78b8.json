{"ast":null,"code":"//imported libraries\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { throwError, timer } from 'rxjs';\nimport { catchError, delayWhen, retryWhen, scan } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Acces-Control-Allow-Origin': '*',\n    'Content-Type': 'application/json'\n  })\n};\nconst maxRequest = 3; //total = 4 (primer intento + reintento)\n\nexport let WebApiService = /*#__PURE__*/(() => {\n  class WebApiService {\n    constructor(http) {\n      this.http = http; //private readonly APIUrl2 = \"https://localhost:7043/api\";\n      //Maestros: 7043, APIUrl: 7118\n      // private readonly APIUrl = \"https://localhost:8081/api\";\n      // private readonly APIUrlContratos = \"https://localhost:7235/Contratos\";\n      // private readonly APIUrlDatosMaestros = 'https://localhost:8083/api/DatosMaestrosLogic/LogicDataMaster';\n      // private readonly ApiGateway = 'http://localhost:8165';\n\n      this.ApiGateway = 'http://181.129.245.90:8165'; //Prefijos de Servicios:\n\n      this._afiliados = '/Afiliados';\n      this._datosMaestros = '/DatosMaestros';\n      this._contratos = '/Contratos';\n    }\n\n    getDatosMaestros() {\n      return this.http.get(this.ApiGateway + this._datosMaestros, {\n        params: new HttpParams().set('TitleDad', '*'),\n        headers: httpOptions.headers\n      }).pipe(retryWhen(error => error.pipe(scan(retryCount => {\n        if (retryCount >= maxRequest) throw error;else {\n          retryCount++;\n          return retryCount;\n        }\n      }, 0), // inicia a contar desde 0\n      delayWhen(() => timer(1000)) //timer en ms (1 segundo)\n      )));\n    }\n\n    getListaAfiliado() {\n      return this.http.get(this.ApiGateway + this._afiliados, {\n        params: new HttpParams().set('ID_AFILIADO', '*'),\n        headers: httpOptions.headers\n      }).pipe(retryWhen(error => error.pipe(scan(retryCount => {\n        if (retryCount >= maxRequest) throw error;else {\n          retryCount++;\n          return retryCount;\n        }\n      }, 0), // inicia a contar desde 0\n      delayWhen(() => timer(1000)) //timer en ms (1 segundo)\n      )));\n    }\n\n    setConsentimientoDatos(consentimientoRespuesta) {\n      return this.http.post(this.ApiGateway + this._afiliados + '/ConsentimientoDatos', consentimientoRespuesta, {\n        headers: httpOptions.headers\n      }).pipe(retryWhen(error => error.pipe(scan(retryCount => {\n        if (retryCount >= maxRequest) throw error;else {\n          retryCount++;\n          console.log(error);\n          return retryCount;\n        }\n      }, 0), // inicia a contar desde 0\n      delayWhen(() => timer(1000)) //timer en ms (1 segundo)\n      )), catchError(this.handleError));\n    }\n\n    setValidarAfiliacion(data) {\n      return this.http.post(this.ApiGateway + this._afiliados + '/ValidarAfiliacion', data, {\n        headers: httpOptions.headers\n      }).pipe(retryWhen(error => error.pipe(scan(retryCount => {\n        if (retryCount >= maxRequest) throw error;else {\n          retryCount++;\n          console.log(error);\n          return retryCount;\n        }\n      }, 0), // inicia a contar desde 0\n      delayWhen(() => timer(1000)) //timer en ms (1 segundo)\n      )), catchError(this.handleError));\n    }\n\n    setSoporteDivisionSalarialAfiliacion(data) {\n      return this.http.post(this.ApiGateway + this._afiliados + '/SoporteDivisionSalarial', data, {\n        headers: httpOptions.headers\n      }).pipe(retryWhen(error => error.pipe(scan(retryCount => {\n        if (retryCount >= maxRequest) throw error;else {\n          retryCount++;\n          console.log(error);\n          return retryCount;\n        }\n      }, 0), // inicia a contar desde 0\n      delayWhen(() => timer(1000)) //timer en ms (1 segundo)\n      )), catchError(this.handleError));\n    }\n\n    setAceptarAfiliacion(data) {\n      return this.http.post(this.ApiGateway + this._afiliados + '/AceptarAfiliacion', data, {\n        headers: httpOptions.headers\n      }).pipe(retryWhen(error => error.pipe(scan(retryCount => {\n        if (retryCount >= maxRequest) throw error;else {\n          retryCount++;\n          console.log(error);\n          return retryCount;\n        }\n      }, 0), // inicia a contar desde 0\n      delayWhen(() => timer(1000)) //timer en ms (1 segundo)\n      )), catchError(this.handleError));\n    }\n\n    setRechazarAfiliacion(data) {\n      return this.http.post(this.ApiGateway + this._afiliados + '/RechazarAfiliacion', data, {\n        headers: httpOptions.headers\n      }).pipe(retryWhen(error => error.pipe(scan(retryCount => {\n        if (retryCount >= maxRequest) throw error;else {\n          retryCount++;\n          console.log(error);\n          return retryCount;\n        }\n      }, 0), // inicia a contar desde 0\n      delayWhen(() => timer(1000)) //timer en ms (1 segundo)\n      )), catchError(this.handleError));\n    }\n\n    setAprobarAfiliacion(data) {\n      return this.http.post(this.ApiGateway + this._afiliados + '/AprobarAfiliacion', data, {\n        headers: httpOptions.headers\n      }).pipe(retryWhen(error => error.pipe(scan(retryCount => {\n        if (retryCount >= maxRequest) throw error;else {\n          retryCount++;\n          console.log(error);\n          return retryCount;\n        }\n      }, 0), // inicia a contar desde 0\n      delayWhen(() => timer(1000)) //timer en ms (1 segundo)\n      )), catchError(this.handleError));\n    }\n\n    getPreguntasDeclaratorias() {\n      return this.http.get(this.ApiGateway + this._afiliados + '/PreguntasDeclaratorias', {\n        headers: httpOptions.headers\n      }).pipe(retryWhen(error => error.pipe(scan(retryCount => {\n        if (retryCount >= maxRequest) throw error;else {\n          retryCount++;\n          return retryCount;\n        }\n      }, 0), // inicia a contar desde 0\n      delayWhen(() => timer(1000)) //timer en ms (1 segundo)\n      )));\n    }\n\n    getMedicamentos() {\n      return this.http.get(this.ApiGateway + this._contratos + '/Medicamentos', {\n        headers: httpOptions.headers\n      }).pipe(retryWhen(error => error.pipe(scan(retryCount => {\n        if (retryCount >= maxRequest) throw error;else {\n          retryCount++;\n          return retryCount;\n        }\n      }, 0), // inicia a contar desde 0\n      delayWhen(() => timer(1000)) //timer en ms (1 segundo)\n      )));\n    }\n\n    handleError(error) {\n      if (error.status === 0) {\n        // A client-side or network error occurred. Handle it accordingly.\n        console.error('An error occurred:', error.error);\n      } else {\n        // The backend returned an unsuccessful response code.\n        // The response body may contain clues as to what went wrong.\n        console.error(`Backend returned code ${error.status}, body was: `, error.error);\n      } // Return an observable with a user-facing error message.\n\n\n      return throwError(() => new Error('Something bad happened; please try again later.'));\n    }\n\n  }\n\n  WebApiService.ɵfac = function WebApiService_Factory(t) {\n    return new (t || WebApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  WebApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: WebApiService,\n    factory: WebApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return WebApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}