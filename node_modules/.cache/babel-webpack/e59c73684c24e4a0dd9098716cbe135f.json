{"ast":null,"code":"import * as i1 from '@angular/cdk/platform';\nimport { PlatformModule } from '@angular/cdk/platform';\nimport * as i0 from '@angular/core';\nimport { isDevMode, Injectable, Optional, Inject, NgModule } from '@angular/core';\nimport { MAT_DATE_LOCALE, DateAdapter as DateAdapter$1, MAT_DATE_FORMATS } from '@angular/material/core';\nimport { Subject } from 'rxjs';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\n\nclass DateAdapter {\n  constructor() {\n    this._localeChanges = new Subject();\n    /** A stream that emits when the locale changes. */\n\n    this.localeChanges = this._localeChanges;\n  }\n  /**\n   * Given a potential date object, returns that same date object if it is\n   * a valid date, or `null` if it's not a valid date.\n   * @param obj The object to check.\n   * @returns A date or `null`.\n   */\n\n\n  getValidDateOrNull(obj) {\n    return this.isDateInstance(obj) && this.isValid(obj) ? obj : null;\n  }\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of its `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n\n\n  deserialize(value) {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n\n    return this.invalid();\n  }\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n\n\n  setLocale(locale) {\n    this.locale = locale;\n\n    this._localeChanges.next();\n  }\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @param unit Unit deep of the comparision.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n\n\n  compareDate(first, second, unit = 'minute') {\n    let d1 = this.getYear(first).toString();\n    let d2 = this.getYear(second).toString();\n\n    if (['y', 'year', 'years'].includes(unit)) {\n      return Number(d1) - Number(d2);\n    }\n\n    d1 += this.getMonth(first).toString().padStart(2, '0');\n    d2 += this.getMonth(second).toString().padStart(2, '0');\n\n    if (['M', 'month', 'months'].includes(unit)) {\n      return Number(d1) - Number(d2);\n    }\n\n    d1 += this.getDate(first).toString().padStart(2, '0');\n    d2 += this.getDate(second).toString().padStart(2, '0');\n\n    if (['d', 'day', 'days'].includes(unit)) {\n      return Number(d1) - Number(d2);\n    }\n\n    d1 += this.getHours(first).toString().padStart(2, '0');\n    d2 += this.getHours(second).toString().padStart(2, '0');\n\n    if (['h', 'hour', 'hours'].indexOf(unit) >= 0) {\n      return Number(d1) - Number(d2);\n    }\n\n    d1 += this.getMinutes(first).toString().padStart(2, '0');\n    d2 += this.getMinutes(second).toString().padStart(2, '0');\n    return Number(d1) - Number(d2);\n  }\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n\n\n  sameDate(first, second, unit = 'minute') {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second, unit);\n      }\n\n      return firstValid == secondValid;\n    }\n\n    return first == second;\n  }\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n\n\n  clampDate(date, min, max, unit = 'minute') {\n    if (min && this.compareDate(date, min, unit) < 0) {\n      return min;\n    }\n\n    if (max && this.compareDate(date, max, unit) > 0) {\n      return max;\n    }\n\n    return date;\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(mmalerba): Remove when we no longer support safari 9.\n\n/** Whether the browser supports the Intl API. */\n\n\nlet SUPPORTS_INTL_API; // We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\n\ntry {\n  SUPPORTS_INTL_API = typeof Intl != 'undefined';\n} catch (_a) {\n  SUPPORTS_INTL_API = false;\n}\n/** The default month names to use if Intl API is not available. */\n\n\nconst DEFAULT_MONTH_NAMES = {\n  'long': ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n/** The default date names to use if Intl API is not available. */\n\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n/** The default hour names to use if Intl API is not available. */\n\nconst DEFAULT_HOUR_NAMES = range(24, i => i === 0 ? '00' : String(i));\n/** The default minute names to use if Intl API is not available. */\n\nconst DEFAULT_MINUTE_NAMES = range(60, String);\n/** The default day of the week names to use if Intl API is not available. */\n\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\n\nconst ISO_8601_REGEX = /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n/** Creates an array and fills it with values. */\n\nfunction range(length, valueFunction) {\n  const valuesArray = Array(length);\n\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n\n  return valuesArray;\n}\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n\n\nclass NativeDateAdapter extends DateAdapter {\n  constructor(matDateLocale, platform) {\n    super();\n    /**\n     * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n     * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n     * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n     * will produce `'8/13/1800'`.\n     *\n     * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n     * getting the string representation of a Date object from its utc representation. We're keeping\n     * it here for sometime, just for precaution, in case we decide to revert some of these changes\n     * though.\n     */\n\n    this.useUtcForDisplay = true;\n    super.setLocale(matDateLocale); // IE does its own time zone correction, so we disable this on IE.\n\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date) {\n    return date.getFullYear();\n  }\n\n  getMonth(date) {\n    return date.getMonth();\n  }\n\n  getDate(date) {\n    return date.getDate();\n  }\n\n  getHours(date) {\n    return date.getHours();\n  }\n\n  setHours(date, value) {\n    const clone = this.clone(date);\n    clone.setHours(value);\n    return clone;\n  }\n\n  getMinutes(date) {\n    return date.getMinutes();\n  }\n\n  setMinutes(date, value) {\n    const clone = this.clone(date);\n    clone.setMinutes(value);\n    return clone;\n  }\n\n  getSeconds(date) {\n    return date.getSeconds();\n  }\n\n  setSeconds(date, value, ms) {\n    const clone = this.clone(date);\n    clone.setSeconds(value, ms);\n    return clone;\n  }\n\n  getMilliseconds(date) {\n    return date.getMilliseconds();\n  }\n\n  getDayOfWeek(date) {\n    return date.getDay();\n  }\n\n  getMonthNames(style) {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {\n        month: style,\n        timeZone: 'utc'\n      });\n      return range(12, i => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames() {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {\n        day: 'numeric',\n        timeZone: 'utc'\n      });\n      return range(31, i => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getHourNames() {\n    return DEFAULT_HOUR_NAMES;\n  }\n\n  getMinuteNames() {\n    return DEFAULT_MINUTE_NAMES;\n  }\n\n  getDayOfWeekNames(style) {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {\n        weekday: style,\n        timeZone: 'utc'\n      });\n      return range(7, i => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date) {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {\n        year: 'numeric',\n        timeZone: 'utc'\n      });\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek() {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date) {\n    return this.getDate(this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date) {\n    return new Date(date.getTime());\n  }\n\n  createDate(year, month, date, hours = 0, minutes = 0, seconds = 0, ms = 0) {\n    if (isDevMode()) {\n      // Check for invalid month and date (except upper bound on date which we have to check after\n      // creating the Date).\n      if (month < 0 || month > 11) {\n        throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n      }\n\n      if (date < 1) {\n        throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n      }\n    }\n\n    let result = this._createDateWithOverflow(year, month, date, hours, minutes, seconds, ms); // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n\n\n    if (result.getMonth() != month && isDevMode()) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today() {\n    return new Date();\n  }\n\n  parse(value) {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date, displayFormat) {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = Object.assign(Object.assign({}, displayFormat), {\n        timeZone: 'utc'\n      });\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date, years) {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date, months) {\n    let newDate = this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + months, this.getDate(date), this.getHours(date), this.getMinutes(date), this.getSeconds(date)); // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n\n\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date, days) {\n    return this._createDateWithOverflow(this.getYear(date), this.getMonth(date), this.getDate(date) + days, this.getHours(date), this.getMinutes(date), this.getSeconds(date));\n  }\n\n  addCalendarHours(date, hours) {\n    return this._createDateWithOverflow(this.getYear(date), this.getMonth(date), this.getDate(date), this.getHours(date) + hours, this.getMinutes(date), this.getSeconds(date));\n  }\n\n  addCalendarMinutes(date, minutes) {\n    return this._createDateWithOverflow(this.getYear(date), this.getMonth(date), this.getDate(date), this.getHours(date), this.getMinutes(date) + minutes, this.getSeconds(date));\n  }\n\n  addCalendarSeconds(date, seconds, ms) {\n    return this._createDateWithOverflow(this.getYear(date), this.getMonth(date), this.getDate(date), this.getHours(date), this.getMinutes(date), this.getSeconds(date) + seconds, this.getMilliseconds(date) + ms);\n  }\n\n  toIso8601(date) {\n    return [date.getUTCFullYear(), this._2digit(date.getUTCMonth() + 1), this._2digit(date.getUTCDate())].join('-');\n  }\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n\n\n  deserialize(value) {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      } // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n\n\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj) {\n    return obj instanceof Date;\n  }\n\n  isValid(date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid() {\n    return new Date(NaN);\n  }\n  /** Creates a date but allows the month and date to overflow. */\n\n\n  _createDateWithOverflow(year, month, date, hours = 0, minutes = 0, seconds = 0, ms = 0) {\n    // Passing the year to the constructor causes year numbers <100 to be converted to 19xx.\n    // To work around this we use `setFullYear` and `setHours` instead.\n    const d = new Date();\n    d.setFullYear(year, month, date);\n    d.setHours(hours, minutes, seconds, ms);\n    return d;\n  }\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n\n\n  _2digit(n) {\n    return ('00' + n).slice(-2);\n  }\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n\n\n  _stripDirectionalityCharacters(str) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n\n\n  _format(dtf, date) {\n    // Passing the year to the constructor causes year numbers <100 to be converted to 19xx.\n    // To work around this we use `setUTCFullYear` and `setUTCHours` instead.\n    const d = new Date();\n    d.setUTCFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n    d.setUTCHours(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n    return dtf.format(d);\n  }\n\n}\n/** @nocollapse */\n\n\nNativeDateAdapter.ɵfac = function NativeDateAdapter_Factory(t) {\n  return new (t || NativeDateAdapter)(i0.ɵɵinject(MAT_DATE_LOCALE, 8), i0.ɵɵinject(i1.Platform));\n};\n/** @nocollapse */\n\n\nNativeDateAdapter.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NativeDateAdapter,\n  factory: NativeDateAdapter.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NativeDateAdapter, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_DATE_LOCALE]\n      }]\n    }, {\n      type: i1.Platform\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst MAT_NATIVE_DATE_FORMATS = {\n  parse: {\n    dateInput: null,\n    datetimeInput: null,\n    timeInput: null,\n    monthInput: null,\n    yearInput: null\n  },\n  display: {\n    dateInput: {\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric'\n    },\n    datetimeInput: {\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: 'numeric'\n    },\n    timeInput: {\n      hour: 'numeric',\n      minute: 'numeric'\n    },\n    monthInput: {\n      month: 'short',\n      year: 'numeric'\n    },\n    yearInput: {\n      year: 'numeric'\n    },\n    dateA11yLabel: {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    },\n    monthLabel: {\n      month: 'short'\n    },\n    monthDayLabel: {\n      month: 'short',\n      day: 'numeric'\n    },\n    monthDayA11yLabel: {\n      month: 'long',\n      day: 'numeric'\n    },\n    monthYearLabel: {\n      year: 'numeric',\n      month: 'short'\n    },\n    monthYearA11yLabel: {\n      year: 'numeric',\n      month: 'long'\n    },\n    timeLabel: {\n      hours: 'numeric',\n      minutes: 'numeric'\n    }\n  }\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nclass NativeDateModule {}\n/** @nocollapse */\n\n\nNativeDateModule.ɵfac = function NativeDateModule_Factory(t) {\n  return new (t || NativeDateModule)();\n};\n/** @nocollapse */\n\n\nNativeDateModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NativeDateModule\n});\n/** @nocollapse */\n\nNativeDateModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [{\n    provide: DateAdapter,\n    useClass: NativeDateAdapter\n  }, {\n    provide: DateAdapter$1,\n    useClass: NativeDateAdapter\n  }],\n  imports: [[PlatformModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NativeDateModule, [{\n    type: NgModule,\n    args: [{\n      imports: [PlatformModule],\n      providers: [{\n        provide: DateAdapter,\n        useClass: NativeDateAdapter\n      }, {\n        provide: DateAdapter$1,\n        useClass: NativeDateAdapter\n      }]\n    }]\n  }], null, null);\n})();\n\nclass MatNativeDateModule {}\n/** @nocollapse */\n\n\nMatNativeDateModule.ɵfac = function MatNativeDateModule_Factory(t) {\n  return new (t || MatNativeDateModule)();\n};\n/** @nocollapse */\n\n\nMatNativeDateModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatNativeDateModule\n});\n/** @nocollapse */\n\nMatNativeDateModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [{\n    provide: MAT_DATE_FORMATS,\n    useValue: MAT_NATIVE_DATE_FORMATS\n  }],\n  imports: [[NativeDateModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatNativeDateModule, [{\n    type: NgModule,\n    args: [{\n      imports: [NativeDateModule],\n      providers: [{\n        provide: MAT_DATE_FORMATS,\n        useValue: MAT_NATIVE_DATE_FORMATS\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { DateAdapter, MAT_NATIVE_DATE_FORMATS, MatNativeDateModule, NativeDateAdapter, NativeDateModule };","map":{"version":3,"sources":["D:/FrontBase/node_modules/@matheo/datepicker/fesm2015/matheo-datepicker-core.js"],"names":["i1","PlatformModule","i0","isDevMode","Injectable","Optional","Inject","NgModule","MAT_DATE_LOCALE","DateAdapter","DateAdapter$1","MAT_DATE_FORMATS","Subject","constructor","_localeChanges","localeChanges","getValidDateOrNull","obj","isDateInstance","isValid","deserialize","value","invalid","setLocale","locale","next","compareDate","first","second","unit","d1","getYear","toString","d2","includes","Number","getMonth","padStart","getDate","getHours","indexOf","getMinutes","sameDate","firstValid","secondValid","clampDate","date","min","max","SUPPORTS_INTL_API","Intl","_a","DEFAULT_MONTH_NAMES","DEFAULT_DATE_NAMES","range","i","String","DEFAULT_HOUR_NAMES","DEFAULT_MINUTE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","length","valueFunction","valuesArray","Array","NativeDateAdapter","matDateLocale","platform","useUtcForDisplay","TRIDENT","_clampDate","EDGE","getFullYear","setHours","clone","setMinutes","getSeconds","setSeconds","ms","getMilliseconds","getDayOfWeek","getDay","getMonthNames","style","dtf","DateTimeFormat","month","timeZone","_stripDirectionalityCharacters","_format","Date","getDateNames","day","getHourNames","getMinuteNames","getDayOfWeekNames","weekday","getYearName","year","getFirstDayOfWeek","getNumDaysInMonth","_createDateWithOverflow","getTime","createDate","hours","minutes","seconds","Error","result","today","parse","format","displayFormat","setFullYear","Math","Object","assign","toDateString","addCalendarYears","years","addCalendarMonths","months","newDate","addCalendarDays","days","addCalendarHours","addCalendarMinutes","addCalendarSeconds","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","join","test","isNaN","NaN","d","n","slice","str","replace","setUTCFullYear","setUTCHours","ɵfac","Platform","ɵprov","type","undefined","decorators","args","MAT_NATIVE_DATE_FORMATS","dateInput","datetimeInput","timeInput","monthInput","yearInput","display","hour","minute","dateA11yLabel","monthLabel","monthDayLabel","monthDayA11yLabel","monthYearLabel","monthYearA11yLabel","timeLabel","NativeDateModule","ɵmod","ɵinj","provide","useClass","imports","providers","MatNativeDateModule","useValue"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,uBAApB;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,SAASC,SAAT,EAAoBC,UAApB,EAAgCC,QAAhC,EAA0CC,MAA1C,EAAkDC,QAAlD,QAAkE,eAAlE;AACA,SAASC,eAAT,EAA0BC,WAAW,IAAIC,aAAzC,EAAwDC,gBAAxD,QAAgF,wBAAhF;AACA,SAASC,OAAT,QAAwB,MAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA,MAAMH,WAAN,CAAkB;AACdI,EAAAA,WAAW,GAAG;AACV,SAAKC,cAAL,GAAsB,IAAIF,OAAJ,EAAtB;AACA;;AACA,SAAKG,aAAL,GAAqB,KAAKD,cAA1B;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIE,EAAAA,kBAAkB,CAACC,GAAD,EAAM;AACpB,WAAO,KAAKC,cAAL,CAAoBD,GAApB,KAA4B,KAAKE,OAAL,CAAaF,GAAb,CAA5B,GAAgDA,GAAhD,GAAsD,IAA7D;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,QAAIA,KAAK,IAAI,IAAT,IAAiB,KAAKH,cAAL,CAAoBG,KAApB,KAA8B,KAAKF,OAAL,CAAaE,KAAb,CAAnD,EAAwE;AACpE,aAAOA,KAAP;AACH;;AACD,WAAO,KAAKC,OAAL,EAAP;AACH;AACD;AACJ;AACA;AACA;;;AACIC,EAAAA,SAAS,CAACC,MAAD,EAAS;AACd,SAAKA,MAAL,GAAcA,MAAd;;AACA,SAAKV,cAAL,CAAoBW,IAApB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,WAAW,CAACC,KAAD,EAAQC,MAAR,EAAgBC,IAAI,GAAG,QAAvB,EAAiC;AACxC,QAAIC,EAAE,GAAG,KAAKC,OAAL,CAAaJ,KAAb,EAAoBK,QAApB,EAAT;AACA,QAAIC,EAAE,GAAG,KAAKF,OAAL,CAAaH,MAAb,EAAqBI,QAArB,EAAT;;AACA,QAAI,CAAC,GAAD,EAAM,MAAN,EAAc,OAAd,EAAuBE,QAAvB,CAAgCL,IAAhC,CAAJ,EAA2C;AACvC,aAAOM,MAAM,CAACL,EAAD,CAAN,GAAaK,MAAM,CAACF,EAAD,CAA1B;AACH;;AACDH,IAAAA,EAAE,IAAI,KAAKM,QAAL,CAAcT,KAAd,EAAqBK,QAArB,GAAgCK,QAAhC,CAAyC,CAAzC,EAA4C,GAA5C,CAAN;AACAJ,IAAAA,EAAE,IAAI,KAAKG,QAAL,CAAcR,MAAd,EAAsBI,QAAtB,GAAiCK,QAAjC,CAA0C,CAA1C,EAA6C,GAA7C,CAAN;;AACA,QAAI,CAAC,GAAD,EAAM,OAAN,EAAe,QAAf,EAAyBH,QAAzB,CAAkCL,IAAlC,CAAJ,EAA6C;AACzC,aAAOM,MAAM,CAACL,EAAD,CAAN,GAAaK,MAAM,CAACF,EAAD,CAA1B;AACH;;AACDH,IAAAA,EAAE,IAAI,KAAKQ,OAAL,CAAaX,KAAb,EAAoBK,QAApB,GAA+BK,QAA/B,CAAwC,CAAxC,EAA2C,GAA3C,CAAN;AACAJ,IAAAA,EAAE,IAAI,KAAKK,OAAL,CAAaV,MAAb,EAAqBI,QAArB,GAAgCK,QAAhC,CAAyC,CAAzC,EAA4C,GAA5C,CAAN;;AACA,QAAI,CAAC,GAAD,EAAM,KAAN,EAAa,MAAb,EAAqBH,QAArB,CAA8BL,IAA9B,CAAJ,EAAyC;AACrC,aAAOM,MAAM,CAACL,EAAD,CAAN,GAAaK,MAAM,CAACF,EAAD,CAA1B;AACH;;AACDH,IAAAA,EAAE,IAAI,KAAKS,QAAL,CAAcZ,KAAd,EAAqBK,QAArB,GAAgCK,QAAhC,CAAyC,CAAzC,EAA4C,GAA5C,CAAN;AACAJ,IAAAA,EAAE,IAAI,KAAKM,QAAL,CAAcX,MAAd,EAAsBI,QAAtB,GAAiCK,QAAjC,CAA0C,CAA1C,EAA6C,GAA7C,CAAN;;AACA,QAAI,CAAC,GAAD,EAAM,MAAN,EAAc,OAAd,EAAuBG,OAAvB,CAA+BX,IAA/B,KAAwC,CAA5C,EAA+C;AAC3C,aAAOM,MAAM,CAACL,EAAD,CAAN,GAAaK,MAAM,CAACF,EAAD,CAA1B;AACH;;AACDH,IAAAA,EAAE,IAAI,KAAKW,UAAL,CAAgBd,KAAhB,EAAuBK,QAAvB,GAAkCK,QAAlC,CAA2C,CAA3C,EAA8C,GAA9C,CAAN;AACAJ,IAAAA,EAAE,IAAI,KAAKQ,UAAL,CAAgBb,MAAhB,EAAwBI,QAAxB,GAAmCK,QAAnC,CAA4C,CAA5C,EAA+C,GAA/C,CAAN;AACA,WAAOF,MAAM,CAACL,EAAD,CAAN,GAAaK,MAAM,CAACF,EAAD,CAA1B;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIS,EAAAA,QAAQ,CAACf,KAAD,EAAQC,MAAR,EAAgBC,IAAI,GAAG,QAAvB,EAAiC;AACrC,QAAIF,KAAK,IAAIC,MAAb,EAAqB;AACjB,UAAIe,UAAU,GAAG,KAAKxB,OAAL,CAAaQ,KAAb,CAAjB;AACA,UAAIiB,WAAW,GAAG,KAAKzB,OAAL,CAAaS,MAAb,CAAlB;;AACA,UAAIe,UAAU,IAAIC,WAAlB,EAA+B;AAC3B,eAAO,CAAC,KAAKlB,WAAL,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgCC,IAAhC,CAAR;AACH;;AACD,aAAOc,UAAU,IAAIC,WAArB;AACH;;AACD,WAAOjB,KAAK,IAAIC,MAAhB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIiB,EAAAA,SAAS,CAACC,IAAD,EAAOC,GAAP,EAAYC,GAAZ,EAAiBnB,IAAI,GAAG,QAAxB,EAAkC;AACvC,QAAIkB,GAAG,IAAI,KAAKrB,WAAL,CAAiBoB,IAAjB,EAAuBC,GAAvB,EAA4BlB,IAA5B,IAAoC,CAA/C,EAAkD;AAC9C,aAAOkB,GAAP;AACH;;AACD,QAAIC,GAAG,IAAI,KAAKtB,WAAL,CAAiBoB,IAAjB,EAAuBE,GAAvB,EAA4BnB,IAA5B,IAAoC,CAA/C,EAAkD;AAC9C,aAAOmB,GAAP;AACH;;AACD,WAAOF,IAAP;AACH;;AA5Ga;AA+GlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,IAAIG,iBAAJ,C,CACA;AACA;AACA;AACA;AACA;;AACA,IAAI;AACAA,EAAAA,iBAAiB,GAAG,OAAOC,IAAP,IAAe,WAAnC;AACH,CAFD,CAGA,OAAOC,EAAP,EAAW;AACPF,EAAAA,iBAAiB,GAAG,KAApB;AACH;AACD;;;AACA,MAAMG,mBAAmB,GAAG;AACxB,UAAQ,CACJ,SADI,EACO,UADP,EACmB,OADnB,EAC4B,OAD5B,EACqC,KADrC,EAC4C,MAD5C,EACoD,MADpD,EAC4D,QAD5D,EACsE,WADtE,EAEJ,SAFI,EAEO,UAFP,EAEmB,UAFnB,CADgB;AAKxB,WAAS,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,EAAkD,KAAlD,EAAyD,KAAzD,EAAgE,KAAhE,EAAuE,KAAvE,EAA8E,KAA9E,CALe;AAMxB,YAAU,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,GAAzC,EAA8C,GAA9C,EAAmD,GAAnD,EAAwD,GAAxD;AANc,CAA5B;AAQA;;AACA,MAAMC,kBAAkB,GAAGC,KAAK,CAAC,EAAD,EAAKC,CAAC,IAAIC,MAAM,CAACD,CAAC,GAAG,CAAL,CAAhB,CAAhC;AACA;;AACA,MAAME,kBAAkB,GAAGH,KAAK,CAAC,EAAD,EAAKC,CAAC,IAAIA,CAAC,KAAK,CAAN,GAAU,IAAV,GAAiBC,MAAM,CAACD,CAAD,CAAjC,CAAhC;AACA;;AACA,MAAMG,oBAAoB,GAAGJ,KAAK,CAAC,EAAD,EAAKE,MAAL,CAAlC;AACA;;AACA,MAAMG,yBAAyB,GAAG;AAC9B,UAAQ,CAAC,QAAD,EAAW,QAAX,EAAqB,SAArB,EAAgC,WAAhC,EAA6C,UAA7C,EAAyD,QAAzD,EAAmE,UAAnE,CADsB;AAE9B,WAAS,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,CAFqB;AAG9B,YAAU,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B;AAHoB,CAAlC;AAKA;AACA;AACA;AACA;AACA;;AACA,MAAMC,cAAc,GAAG,oFAAvB;AACA;;AACA,SAASN,KAAT,CAAeO,MAAf,EAAuBC,aAAvB,EAAsC;AAClC,QAAMC,WAAW,GAAGC,KAAK,CAACH,MAAD,CAAzB;;AACA,OAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGM,MAApB,EAA4BN,CAAC,EAA7B,EAAiC;AAC7BQ,IAAAA,WAAW,CAACR,CAAD,CAAX,GAAiBO,aAAa,CAACP,CAAD,CAA9B;AACH;;AACD,SAAOQ,WAAP;AACH;AACD;;;AACA,MAAME,iBAAN,SAAgCxD,WAAhC,CAA4C;AACxCI,EAAAA,WAAW,CAACqD,aAAD,EAAgBC,QAAhB,EAA0B;AACjC;AACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACQ,SAAKC,gBAAL,GAAwB,IAAxB;AACA,UAAM7C,SAAN,CAAgB2C,aAAhB,EAdiC,CAejC;;AACA,SAAKE,gBAAL,GAAwB,CAACD,QAAQ,CAACE,OAAlC;AACA,SAAKC,UAAL,GAAkBH,QAAQ,CAACE,OAAT,IAAoBF,QAAQ,CAACI,IAA/C;AACH;;AACDxC,EAAAA,OAAO,CAACe,IAAD,EAAO;AACV,WAAOA,IAAI,CAAC0B,WAAL,EAAP;AACH;;AACDpC,EAAAA,QAAQ,CAACU,IAAD,EAAO;AACX,WAAOA,IAAI,CAACV,QAAL,EAAP;AACH;;AACDE,EAAAA,OAAO,CAACQ,IAAD,EAAO;AACV,WAAOA,IAAI,CAACR,OAAL,EAAP;AACH;;AACDC,EAAAA,QAAQ,CAACO,IAAD,EAAO;AACX,WAAOA,IAAI,CAACP,QAAL,EAAP;AACH;;AACDkC,EAAAA,QAAQ,CAAC3B,IAAD,EAAOzB,KAAP,EAAc;AAClB,UAAMqD,KAAK,GAAG,KAAKA,KAAL,CAAW5B,IAAX,CAAd;AACA4B,IAAAA,KAAK,CAACD,QAAN,CAAepD,KAAf;AACA,WAAOqD,KAAP;AACH;;AACDjC,EAAAA,UAAU,CAACK,IAAD,EAAO;AACb,WAAOA,IAAI,CAACL,UAAL,EAAP;AACH;;AACDkC,EAAAA,UAAU,CAAC7B,IAAD,EAAOzB,KAAP,EAAc;AACpB,UAAMqD,KAAK,GAAG,KAAKA,KAAL,CAAW5B,IAAX,CAAd;AACA4B,IAAAA,KAAK,CAACC,UAAN,CAAiBtD,KAAjB;AACA,WAAOqD,KAAP;AACH;;AACDE,EAAAA,UAAU,CAAC9B,IAAD,EAAO;AACb,WAAOA,IAAI,CAAC8B,UAAL,EAAP;AACH;;AACDC,EAAAA,UAAU,CAAC/B,IAAD,EAAOzB,KAAP,EAAcyD,EAAd,EAAkB;AACxB,UAAMJ,KAAK,GAAG,KAAKA,KAAL,CAAW5B,IAAX,CAAd;AACA4B,IAAAA,KAAK,CAACG,UAAN,CAAiBxD,KAAjB,EAAwByD,EAAxB;AACA,WAAOJ,KAAP;AACH;;AACDK,EAAAA,eAAe,CAACjC,IAAD,EAAO;AAClB,WAAOA,IAAI,CAACiC,eAAL,EAAP;AACH;;AACDC,EAAAA,YAAY,CAAClC,IAAD,EAAO;AACf,WAAOA,IAAI,CAACmC,MAAL,EAAP;AACH;;AACDC,EAAAA,aAAa,CAACC,KAAD,EAAQ;AACjB,QAAIlC,iBAAJ,EAAuB;AACnB,YAAMmC,GAAG,GAAG,IAAIlC,IAAI,CAACmC,cAAT,CAAwB,KAAK7D,MAA7B,EAAqC;AAAE8D,QAAAA,KAAK,EAAEH,KAAT;AAAgBI,QAAAA,QAAQ,EAAE;AAA1B,OAArC,CAAZ;AACA,aAAOjC,KAAK,CAAC,EAAD,EAAKC,CAAC,IAAI,KAAKiC,8BAAL,CAAoC,KAAKC,OAAL,CAAaL,GAAb,EAAkB,IAAIM,IAAJ,CAAS,IAAT,EAAenC,CAAf,EAAkB,CAAlB,CAAlB,CAApC,CAAV,CAAZ;AACH;;AACD,WAAOH,mBAAmB,CAAC+B,KAAD,CAA1B;AACH;;AACDQ,EAAAA,YAAY,GAAG;AACX,QAAI1C,iBAAJ,EAAuB;AACnB,YAAMmC,GAAG,GAAG,IAAIlC,IAAI,CAACmC,cAAT,CAAwB,KAAK7D,MAA7B,EAAqC;AAAEoE,QAAAA,GAAG,EAAE,SAAP;AAAkBL,QAAAA,QAAQ,EAAE;AAA5B,OAArC,CAAZ;AACA,aAAOjC,KAAK,CAAC,EAAD,EAAKC,CAAC,IAAI,KAAKiC,8BAAL,CAAoC,KAAKC,OAAL,CAAaL,GAAb,EAAkB,IAAIM,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkBnC,CAAC,GAAG,CAAtB,CAAlB,CAApC,CAAV,CAAZ;AACH;;AACD,WAAOF,kBAAP;AACH;;AACDwC,EAAAA,YAAY,GAAG;AACX,WAAOpC,kBAAP;AACH;;AACDqC,EAAAA,cAAc,GAAG;AACb,WAAOpC,oBAAP;AACH;;AACDqC,EAAAA,iBAAiB,CAACZ,KAAD,EAAQ;AACrB,QAAIlC,iBAAJ,EAAuB;AACnB,YAAMmC,GAAG,GAAG,IAAIlC,IAAI,CAACmC,cAAT,CAAwB,KAAK7D,MAA7B,EAAqC;AAAEwE,QAAAA,OAAO,EAAEb,KAAX;AAAkBI,QAAAA,QAAQ,EAAE;AAA5B,OAArC,CAAZ;AACA,aAAOjC,KAAK,CAAC,CAAD,EAAIC,CAAC,IAAI,KAAKiC,8BAAL,CAAoC,KAAKC,OAAL,CAAaL,GAAb,EAAkB,IAAIM,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkBnC,CAAC,GAAG,CAAtB,CAAlB,CAApC,CAAT,CAAZ;AACH;;AACD,WAAOI,yBAAyB,CAACwB,KAAD,CAAhC;AACH;;AACDc,EAAAA,WAAW,CAACnD,IAAD,EAAO;AACd,QAAIG,iBAAJ,EAAuB;AACnB,YAAMmC,GAAG,GAAG,IAAIlC,IAAI,CAACmC,cAAT,CAAwB,KAAK7D,MAA7B,EAAqC;AAAE0E,QAAAA,IAAI,EAAE,SAAR;AAAmBX,QAAAA,QAAQ,EAAE;AAA7B,OAArC,CAAZ;AACA,aAAO,KAAKC,8BAAL,CAAoC,KAAKC,OAAL,CAAaL,GAAb,EAAkBtC,IAAlB,CAApC,CAAP;AACH;;AACD,WAAOU,MAAM,CAAC,KAAKzB,OAAL,CAAae,IAAb,CAAD,CAAb;AACH;;AACDqD,EAAAA,iBAAiB,GAAG;AAChB;AACA,WAAO,CAAP;AACH;;AACDC,EAAAA,iBAAiB,CAACtD,IAAD,EAAO;AACpB,WAAO,KAAKR,OAAL,CAAa,KAAK+D,uBAAL,CAA6B,KAAKtE,OAAL,CAAae,IAAb,CAA7B,EAAiD,KAAKV,QAAL,CAAcU,IAAd,IAAsB,CAAvE,EAA0E,CAA1E,CAAb,CAAP;AACH;;AACD4B,EAAAA,KAAK,CAAC5B,IAAD,EAAO;AACR,WAAO,IAAI4C,IAAJ,CAAS5C,IAAI,CAACwD,OAAL,EAAT,CAAP;AACH;;AACDC,EAAAA,UAAU,CAACL,IAAD,EAAOZ,KAAP,EAAcxC,IAAd,EAAoB0D,KAAK,GAAG,CAA5B,EAA+BC,OAAO,GAAG,CAAzC,EAA4CC,OAAO,GAAG,CAAtD,EAAyD5B,EAAE,GAAG,CAA9D,EAAiE;AACvE,QAAI3E,SAAS,EAAb,EAAiB;AACb;AACA;AACA,UAAImF,KAAK,GAAG,CAAR,IAAaA,KAAK,GAAG,EAAzB,EAA6B;AACzB,cAAMqB,KAAK,CAAE,wBAAuBrB,KAAM,4CAA/B,CAAX;AACH;;AACD,UAAIxC,IAAI,GAAG,CAAX,EAAc;AACV,cAAM6D,KAAK,CAAE,iBAAgB7D,IAAK,mCAAvB,CAAX;AACH;AACJ;;AACD,QAAI8D,MAAM,GAAG,KAAKP,uBAAL,CAA6BH,IAA7B,EAAmCZ,KAAnC,EAA0CxC,IAA1C,EAAgD0D,KAAhD,EAAuDC,OAAvD,EAAgEC,OAAhE,EAAyE5B,EAAzE,CAAb,CAXuE,CAYvE;;;AACA,QAAI8B,MAAM,CAACxE,QAAP,MAAqBkD,KAArB,IAA+BnF,SAAS,EAA5C,EAAiD;AAC7C,YAAMwG,KAAK,CAAE,iBAAgB7D,IAAK,2BAA0BwC,KAAM,IAAvD,CAAX;AACH;;AACD,WAAOsB,MAAP;AACH;;AACDC,EAAAA,KAAK,GAAG;AACJ,WAAO,IAAInB,IAAJ,EAAP;AACH;;AACDoB,EAAAA,KAAK,CAACzF,KAAD,EAAQ;AACT;AACA;AACA,QAAI,OAAOA,KAAP,IAAgB,QAApB,EAA8B;AAC1B,aAAO,IAAIqE,IAAJ,CAASrE,KAAT,CAAP;AACH;;AACD,WAAOA,KAAK,GAAG,IAAIqE,IAAJ,CAASA,IAAI,CAACoB,KAAL,CAAWzF,KAAX,CAAT,CAAH,GAAiC,IAA7C;AACH;;AACD0F,EAAAA,MAAM,CAACjE,IAAD,EAAOkE,aAAP,EAAsB;AACxB,QAAI,CAAC,KAAK7F,OAAL,CAAa2B,IAAb,CAAL,EAAyB;AACrB,YAAM6D,KAAK,CAAC,gDAAD,CAAX;AACH;;AACD,QAAI1D,iBAAJ,EAAuB;AACnB;AACA;AACA,UAAI,KAAKqB,UAAL,KAAoBxB,IAAI,CAAC0B,WAAL,KAAqB,CAArB,IAA0B1B,IAAI,CAAC0B,WAAL,KAAqB,IAAnE,CAAJ,EAA8E;AAC1E1B,QAAAA,IAAI,GAAG,KAAK4B,KAAL,CAAW5B,IAAX,CAAP;AACAA,QAAAA,IAAI,CAACmE,WAAL,CAAiBC,IAAI,CAAClE,GAAL,CAAS,CAAT,EAAYkE,IAAI,CAACnE,GAAL,CAAS,IAAT,EAAeD,IAAI,CAAC0B,WAAL,EAAf,CAAZ,CAAjB;AACH;;AACDwC,MAAAA,aAAa,GAAGG,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,aAAlB,CAAd,EAAgD;AAAEzB,QAAAA,QAAQ,EAAE;AAAZ,OAAhD,CAAhB;AACA,YAAMH,GAAG,GAAG,IAAIlC,IAAI,CAACmC,cAAT,CAAwB,KAAK7D,MAA7B,EAAqCwF,aAArC,CAAZ;AACA,aAAO,KAAKxB,8BAAL,CAAoC,KAAKC,OAAL,CAAaL,GAAb,EAAkBtC,IAAlB,CAApC,CAAP;AACH;;AACD,WAAO,KAAK0C,8BAAL,CAAoC1C,IAAI,CAACuE,YAAL,EAApC,CAAP;AACH;;AACDC,EAAAA,gBAAgB,CAACxE,IAAD,EAAOyE,KAAP,EAAc;AAC1B,WAAO,KAAKC,iBAAL,CAAuB1E,IAAvB,EAA6ByE,KAAK,GAAG,EAArC,CAAP;AACH;;AACDC,EAAAA,iBAAiB,CAAC1E,IAAD,EAAO2E,MAAP,EAAe;AAC5B,QAAIC,OAAO,GAAG,KAAKrB,uBAAL,CAA6B,KAAKtE,OAAL,CAAae,IAAb,CAA7B,EAAiD,KAAKV,QAAL,CAAcU,IAAd,IAAsB2E,MAAvE,EAA+E,KAAKnF,OAAL,CAAaQ,IAAb,CAA/E,EAAmG,KAAKP,QAAL,CAAcO,IAAd,CAAnG,EAAwH,KAAKL,UAAL,CAAgBK,IAAhB,CAAxH,EAA+I,KAAK8B,UAAL,CAAgB9B,IAAhB,CAA/I,CAAd,CAD4B,CAE5B;AACA;AACA;AACA;;;AACA,QAAI,KAAKV,QAAL,CAAcsF,OAAd,KAA0B,CAAC,CAAC,KAAKtF,QAAL,CAAcU,IAAd,IAAsB2E,MAAvB,IAAiC,EAAjC,GAAsC,EAAvC,IAA6C,EAA3E,EAA+E;AAC3EC,MAAAA,OAAO,GAAG,KAAKrB,uBAAL,CAA6B,KAAKtE,OAAL,CAAa2F,OAAb,CAA7B,EAAoD,KAAKtF,QAAL,CAAcsF,OAAd,CAApD,EAA4E,CAA5E,CAAV;AACH;;AACD,WAAOA,OAAP;AACH;;AACDC,EAAAA,eAAe,CAAC7E,IAAD,EAAO8E,IAAP,EAAa;AACxB,WAAO,KAAKvB,uBAAL,CAA6B,KAAKtE,OAAL,CAAae,IAAb,CAA7B,EAAiD,KAAKV,QAAL,CAAcU,IAAd,CAAjD,EAAsE,KAAKR,OAAL,CAAaQ,IAAb,IAAqB8E,IAA3F,EAAiG,KAAKrF,QAAL,CAAcO,IAAd,CAAjG,EAAsH,KAAKL,UAAL,CAAgBK,IAAhB,CAAtH,EAA6I,KAAK8B,UAAL,CAAgB9B,IAAhB,CAA7I,CAAP;AACH;;AACD+E,EAAAA,gBAAgB,CAAC/E,IAAD,EAAO0D,KAAP,EAAc;AAC1B,WAAO,KAAKH,uBAAL,CAA6B,KAAKtE,OAAL,CAAae,IAAb,CAA7B,EAAiD,KAAKV,QAAL,CAAcU,IAAd,CAAjD,EAAsE,KAAKR,OAAL,CAAaQ,IAAb,CAAtE,EAA0F,KAAKP,QAAL,CAAcO,IAAd,IAAsB0D,KAAhH,EAAuH,KAAK/D,UAAL,CAAgBK,IAAhB,CAAvH,EAA8I,KAAK8B,UAAL,CAAgB9B,IAAhB,CAA9I,CAAP;AACH;;AACDgF,EAAAA,kBAAkB,CAAChF,IAAD,EAAO2D,OAAP,EAAgB;AAC9B,WAAO,KAAKJ,uBAAL,CAA6B,KAAKtE,OAAL,CAAae,IAAb,CAA7B,EAAiD,KAAKV,QAAL,CAAcU,IAAd,CAAjD,EAAsE,KAAKR,OAAL,CAAaQ,IAAb,CAAtE,EAA0F,KAAKP,QAAL,CAAcO,IAAd,CAA1F,EAA+G,KAAKL,UAAL,CAAgBK,IAAhB,IAAwB2D,OAAvI,EAAgJ,KAAK7B,UAAL,CAAgB9B,IAAhB,CAAhJ,CAAP;AACH;;AACDiF,EAAAA,kBAAkB,CAACjF,IAAD,EAAO4D,OAAP,EAAgB5B,EAAhB,EAAoB;AAClC,WAAO,KAAKuB,uBAAL,CAA6B,KAAKtE,OAAL,CAAae,IAAb,CAA7B,EAAiD,KAAKV,QAAL,CAAcU,IAAd,CAAjD,EAAsE,KAAKR,OAAL,CAAaQ,IAAb,CAAtE,EAA0F,KAAKP,QAAL,CAAcO,IAAd,CAA1F,EAA+G,KAAKL,UAAL,CAAgBK,IAAhB,CAA/G,EAAsI,KAAK8B,UAAL,CAAgB9B,IAAhB,IAAwB4D,OAA9J,EAAuK,KAAK3B,eAAL,CAAqBjC,IAArB,IAA6BgC,EAApM,CAAP;AACH;;AACDkD,EAAAA,SAAS,CAAClF,IAAD,EAAO;AACZ,WAAO,CACHA,IAAI,CAACmF,cAAL,EADG,EAEH,KAAKC,OAAL,CAAapF,IAAI,CAACqF,WAAL,KAAqB,CAAlC,CAFG,EAGH,KAAKD,OAAL,CAAapF,IAAI,CAACsF,UAAL,EAAb,CAHG,EAILC,IAJK,CAIA,GAJA,CAAP;AAKH;AACD;AACJ;AACA;AACA;AACA;;;AACIjH,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3B,UAAI,CAACA,KAAL,EAAY;AACR,eAAO,IAAP;AACH,OAH0B,CAI3B;AACA;;;AACA,UAAIuC,cAAc,CAAC0E,IAAf,CAAoBjH,KAApB,CAAJ,EAAgC;AAC5B,YAAIyB,IAAI,GAAG,IAAI4C,IAAJ,CAASrE,KAAT,CAAX;;AACA,YAAI,KAAKF,OAAL,CAAa2B,IAAb,CAAJ,EAAwB;AACpB,iBAAOA,IAAP;AACH;AACJ;AACJ;;AACD,WAAO,MAAM1B,WAAN,CAAkBC,KAAlB,CAAP;AACH;;AACDH,EAAAA,cAAc,CAACD,GAAD,EAAM;AAChB,WAAOA,GAAG,YAAYyE,IAAtB;AACH;;AACDvE,EAAAA,OAAO,CAAC2B,IAAD,EAAO;AACV,WAAO,CAACyF,KAAK,CAACzF,IAAI,CAACwD,OAAL,EAAD,CAAb;AACH;;AACDhF,EAAAA,OAAO,GAAG;AACN,WAAO,IAAIoE,IAAJ,CAAS8C,GAAT,CAAP;AACH;AACD;;;AACAnC,EAAAA,uBAAuB,CAACH,IAAD,EAAOZ,KAAP,EAAcxC,IAAd,EAAoB0D,KAAK,GAAG,CAA5B,EAA+BC,OAAO,GAAG,CAAzC,EAA4CC,OAAO,GAAG,CAAtD,EAAyD5B,EAAE,GAAG,CAA9D,EAAiE;AACpF;AACA;AACA,UAAM2D,CAAC,GAAG,IAAI/C,IAAJ,EAAV;AACA+C,IAAAA,CAAC,CAACxB,WAAF,CAAcf,IAAd,EAAoBZ,KAApB,EAA2BxC,IAA3B;AACA2F,IAAAA,CAAC,CAAChE,QAAF,CAAW+B,KAAX,EAAkBC,OAAlB,EAA2BC,OAA3B,EAAoC5B,EAApC;AACA,WAAO2D,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIP,EAAAA,OAAO,CAACQ,CAAD,EAAI;AACP,WAAO,CAAC,OAAOA,CAAR,EAAWC,KAAX,CAAiB,CAAC,CAAlB,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACInD,EAAAA,8BAA8B,CAACoD,GAAD,EAAM;AAChC,WAAOA,GAAG,CAACC,OAAJ,CAAY,iBAAZ,EAA+B,EAA/B,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIpD,EAAAA,OAAO,CAACL,GAAD,EAAMtC,IAAN,EAAY;AACf;AACA;AACA,UAAM2F,CAAC,GAAG,IAAI/C,IAAJ,EAAV;AACA+C,IAAAA,CAAC,CAACK,cAAF,CAAiBhG,IAAI,CAAC0B,WAAL,EAAjB,EAAqC1B,IAAI,CAACV,QAAL,EAArC,EAAsDU,IAAI,CAACR,OAAL,EAAtD;AACAmG,IAAAA,CAAC,CAACM,WAAF,CAAcjG,IAAI,CAACP,QAAL,EAAd,EAA+BO,IAAI,CAACL,UAAL,EAA/B,EAAkDK,IAAI,CAAC8B,UAAL,EAAlD,EAAqE9B,IAAI,CAACiC,eAAL,EAArE;AACA,WAAOK,GAAG,CAAC2B,MAAJ,CAAW0B,CAAX,CAAP;AACH;;AAjQuC;AAmQ5C;;;AAAmBxE,iBAAiB,CAAC+E,IAAlB;AAAA,mBAA+G/E,iBAA/G,EAAqG/D,EAArG,UAAkJM,eAAlJ,MAAqGN,EAArG,UAA8LF,EAAE,CAACiJ,QAAjM;AAAA;AACnB;;;AAAmBhF,iBAAiB,CAACiF,KAAlB,kBADqGhJ,EACrG;AAAA,SAAmH+D,iBAAnH;AAAA,WAAmHA,iBAAnH;AAAA;;AACnB;AAAA,qDAFwH/D,EAExH,mBAA4F+D,iBAA5F,EAA2H,CAAC;AAChHkF,IAAAA,IAAI,EAAE/I;AAD0G,GAAD,CAA3H,EAE4B,YAAY;AAAE,WAAO,CAAC;AAAE+I,MAAAA,IAAI,EAAEC,SAAR;AAAmBC,MAAAA,UAAU,EAAE,CAAC;AAC9DF,QAAAA,IAAI,EAAE9I;AADwD,OAAD,EAE9D;AACC8I,QAAAA,IAAI,EAAE7I,MADP;AAECgJ,QAAAA,IAAI,EAAE,CAAC9I,eAAD;AAFP,OAF8D;AAA/B,KAAD,EAK3B;AAAE2I,MAAAA,IAAI,EAAEnJ,EAAE,CAACiJ;AAAX,KAL2B,CAAP;AAKK,GAP/C;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMM,uBAAuB,GAAG;AAC5BzC,EAAAA,KAAK,EAAE;AACH0C,IAAAA,SAAS,EAAE,IADR;AAEHC,IAAAA,aAAa,EAAE,IAFZ;AAGHC,IAAAA,SAAS,EAAE,IAHR;AAIHC,IAAAA,UAAU,EAAE,IAJT;AAKHC,IAAAA,SAAS,EAAE;AALR,GADqB;AAQ5BC,EAAAA,OAAO,EAAE;AACLL,IAAAA,SAAS,EAAE;AAAEtD,MAAAA,IAAI,EAAE,SAAR;AAAmBZ,MAAAA,KAAK,EAAE,SAA1B;AAAqCM,MAAAA,GAAG,EAAE;AAA1C,KADN;AAEL6D,IAAAA,aAAa,EAAE;AACXvD,MAAAA,IAAI,EAAE,SADK;AAEXZ,MAAAA,KAAK,EAAE,SAFI;AAGXM,MAAAA,GAAG,EAAE,SAHM;AAIXkE,MAAAA,IAAI,EAAE,SAJK;AAKXC,MAAAA,MAAM,EAAE;AALG,KAFV;AASLL,IAAAA,SAAS,EAAE;AAAEI,MAAAA,IAAI,EAAE,SAAR;AAAmBC,MAAAA,MAAM,EAAE;AAA3B,KATN;AAULJ,IAAAA,UAAU,EAAE;AAAErE,MAAAA,KAAK,EAAE,OAAT;AAAkBY,MAAAA,IAAI,EAAE;AAAxB,KAVP;AAWL0D,IAAAA,SAAS,EAAE;AAAE1D,MAAAA,IAAI,EAAE;AAAR,KAXN;AAYL8D,IAAAA,aAAa,EAAE;AAAE9D,MAAAA,IAAI,EAAE,SAAR;AAAmBZ,MAAAA,KAAK,EAAE,MAA1B;AAAkCM,MAAAA,GAAG,EAAE;AAAvC,KAZV;AAaLqE,IAAAA,UAAU,EAAE;AAAE3E,MAAAA,KAAK,EAAE;AAAT,KAbP;AAcL4E,IAAAA,aAAa,EAAE;AAAE5E,MAAAA,KAAK,EAAE,OAAT;AAAkBM,MAAAA,GAAG,EAAE;AAAvB,KAdV;AAeLuE,IAAAA,iBAAiB,EAAE;AAAE7E,MAAAA,KAAK,EAAE,MAAT;AAAiBM,MAAAA,GAAG,EAAE;AAAtB,KAfd;AAgBLwE,IAAAA,cAAc,EAAE;AAAElE,MAAAA,IAAI,EAAE,SAAR;AAAmBZ,MAAAA,KAAK,EAAE;AAA1B,KAhBX;AAiBL+E,IAAAA,kBAAkB,EAAE;AAAEnE,MAAAA,IAAI,EAAE,SAAR;AAAmBZ,MAAAA,KAAK,EAAE;AAA1B,KAjBf;AAkBLgF,IAAAA,SAAS,EAAE;AAAE9D,MAAAA,KAAK,EAAE,SAAT;AAAoBC,MAAAA,OAAO,EAAE;AAA7B;AAlBN;AARmB,CAAhC;AA8BA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAM8D,gBAAN,CAAuB;AAEvB;;;AAAmBA,gBAAgB,CAACvB,IAAjB;AAAA,mBAA8GuB,gBAA9G;AAAA;AACnB;;;AAAmBA,gBAAgB,CAACC,IAAjB,kBAlEqGtK,EAkErG;AAAA,QAA+GqK;AAA/G;AACnB;;AAAmBA,gBAAgB,CAACE,IAAjB,kBAnEqGvK,EAmErG;AAAA,aAA4I,CACvJ;AAAEwK,IAAAA,OAAO,EAAEjK,WAAX;AAAwBkK,IAAAA,QAAQ,EAAE1G;AAAlC,GADuJ,EAEvJ;AAAEyG,IAAAA,OAAO,EAAEhK,aAAX;AAA0BiK,IAAAA,QAAQ,EAAE1G;AAApC,GAFuJ,CAA5I;AAAA,YAGF,CAAChE,cAAD,CAHE;AAAA;;AAInB;AAAA,qDAvEwHC,EAuExH,mBAA4FqK,gBAA5F,EAA0H,CAAC;AAC/GpB,IAAAA,IAAI,EAAE5I,QADyG;AAE/G+I,IAAAA,IAAI,EAAE,CAAC;AACCsB,MAAAA,OAAO,EAAE,CAAC3K,cAAD,CADV;AAEC4K,MAAAA,SAAS,EAAE,CACP;AAAEH,QAAAA,OAAO,EAAEjK,WAAX;AAAwBkK,QAAAA,QAAQ,EAAE1G;AAAlC,OADO,EAEP;AAAEyG,QAAAA,OAAO,EAAEhK,aAAX;AAA0BiK,QAAAA,QAAQ,EAAE1G;AAApC,OAFO;AAFZ,KAAD;AAFyG,GAAD,CAA1H;AAAA;;AAUA,MAAM6G,mBAAN,CAA0B;AAE1B;;;AAAmBA,mBAAmB,CAAC9B,IAApB;AAAA,mBAAiH8B,mBAAjH;AAAA;AACnB;;;AAAmBA,mBAAmB,CAACN,IAApB,kBApFqGtK,EAoFrG;AAAA,QAAkH4K;AAAlH;AACnB;;AAAmBA,mBAAmB,CAACL,IAApB,kBArFqGvK,EAqFrG;AAAA,aAAkJ,CAAC;AAAEwK,IAAAA,OAAO,EAAE/J,gBAAX;AAA6BoK,IAAAA,QAAQ,EAAExB;AAAvC,GAAD,CAAlJ;AAAA,YAAgO,CAACgB,gBAAD,CAAhO;AAAA;;AACnB;AAAA,qDAtFwHrK,EAsFxH,mBAA4F4K,mBAA5F,EAA6H,CAAC;AAClH3B,IAAAA,IAAI,EAAE5I,QAD4G;AAElH+I,IAAAA,IAAI,EAAE,CAAC;AACCsB,MAAAA,OAAO,EAAE,CAACL,gBAAD,CADV;AAECM,MAAAA,SAAS,EAAE,CAAC;AAAEH,QAAAA,OAAO,EAAE/J,gBAAX;AAA6BoK,QAAAA,QAAQ,EAAExB;AAAvC,OAAD;AAFZ,KAAD;AAF4G,GAAD,CAA7H;AAAA;AAQA;AACA;AACA;;;AAEA,SAAS9I,WAAT,EAAsB8I,uBAAtB,EAA+CuB,mBAA/C,EAAoE7G,iBAApE,EAAuFsG,gBAAvF","sourcesContent":["import * as i1 from '@angular/cdk/platform';\nimport { PlatformModule } from '@angular/cdk/platform';\nimport * as i0 from '@angular/core';\nimport { isDevMode, Injectable, Optional, Inject, NgModule } from '@angular/core';\nimport { MAT_DATE_LOCALE, DateAdapter as DateAdapter$1, MAT_DATE_FORMATS } from '@angular/material/core';\nimport { Subject } from 'rxjs';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nclass DateAdapter {\n    constructor() {\n        this._localeChanges = new Subject();\n        /** A stream that emits when the locale changes. */\n        this.localeChanges = this._localeChanges;\n    }\n    /**\n     * Given a potential date object, returns that same date object if it is\n     * a valid date, or `null` if it's not a valid date.\n     * @param obj The object to check.\n     * @returns A date or `null`.\n     */\n    getValidDateOrNull(obj) {\n        return this.isDateInstance(obj) && this.isValid(obj) ? obj : null;\n    }\n    /**\n     * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n     * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n     * string). The default implementation does not allow any deserialization, it simply checks that\n     * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n     * method on all of its `@Input()` properties that accept dates. It is therefore possible to\n     * support passing values from your backend directly to these properties by overriding this method\n     * to also deserialize the format used by your backend.\n     * @param value The value to be deserialized into a date object.\n     * @returns The deserialized date object, either a valid date, null if the value can be\n     *     deserialized into a null date (e.g. the empty string), or an invalid date.\n     */\n    deserialize(value) {\n        if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n            return value;\n        }\n        return this.invalid();\n    }\n    /**\n     * Sets the locale used for all dates.\n     * @param locale The new locale.\n     */\n    setLocale(locale) {\n        this.locale = locale;\n        this._localeChanges.next();\n    }\n    /**\n     * Compares two dates.\n     * @param first The first date to compare.\n     * @param second The second date to compare.\n     * @param unit Unit deep of the comparision.\n     * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n     *     a number greater than 0 if the first date is later.\n     */\n    compareDate(first, second, unit = 'minute') {\n        let d1 = this.getYear(first).toString();\n        let d2 = this.getYear(second).toString();\n        if (['y', 'year', 'years'].includes(unit)) {\n            return Number(d1) - Number(d2);\n        }\n        d1 += this.getMonth(first).toString().padStart(2, '0');\n        d2 += this.getMonth(second).toString().padStart(2, '0');\n        if (['M', 'month', 'months'].includes(unit)) {\n            return Number(d1) - Number(d2);\n        }\n        d1 += this.getDate(first).toString().padStart(2, '0');\n        d2 += this.getDate(second).toString().padStart(2, '0');\n        if (['d', 'day', 'days'].includes(unit)) {\n            return Number(d1) - Number(d2);\n        }\n        d1 += this.getHours(first).toString().padStart(2, '0');\n        d2 += this.getHours(second).toString().padStart(2, '0');\n        if (['h', 'hour', 'hours'].indexOf(unit) >= 0) {\n            return Number(d1) - Number(d2);\n        }\n        d1 += this.getMinutes(first).toString().padStart(2, '0');\n        d2 += this.getMinutes(second).toString().padStart(2, '0');\n        return Number(d1) - Number(d2);\n    }\n    /**\n     * Checks if two dates are equal.\n     * @param first The first date to check.\n     * @param second The second date to check.\n     * @returns Whether the two dates are equal.\n     *     Null dates are considered equal to other null dates.\n     */\n    sameDate(first, second, unit = 'minute') {\n        if (first && second) {\n            let firstValid = this.isValid(first);\n            let secondValid = this.isValid(second);\n            if (firstValid && secondValid) {\n                return !this.compareDate(first, second, unit);\n            }\n            return firstValid == secondValid;\n        }\n        return first == second;\n    }\n    /**\n     * Clamp the given date between min and max dates.\n     * @param date The date to clamp.\n     * @param min The minimum value to allow. If null or omitted no min is enforced.\n     * @param max The maximum value to allow. If null or omitted no max is enforced.\n     * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n     *     otherwise `date`.\n     */\n    clampDate(date, min, max, unit = 'minute') {\n        if (min && this.compareDate(date, min, unit) < 0) {\n            return min;\n        }\n        if (max && this.compareDate(date, max, unit) > 0) {\n            return max;\n        }\n        return date;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nlet SUPPORTS_INTL_API;\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\ntry {\n    SUPPORTS_INTL_API = typeof Intl != 'undefined';\n}\ncatch (_a) {\n    SUPPORTS_INTL_API = false;\n}\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n    'long': [\n        'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n        'October', 'November', 'December'\n    ],\n    'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n    'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n/** The default hour names to use if Intl API is not available. */\nconst DEFAULT_HOUR_NAMES = range(24, i => i === 0 ? '00' : String(i));\n/** The default minute names to use if Intl API is not available. */\nconst DEFAULT_MINUTE_NAMES = range(60, String);\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n    'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n    'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX = /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n/** Creates an array and fills it with values. */\nfunction range(length, valueFunction) {\n    const valuesArray = Array(length);\n    for (let i = 0; i < length; i++) {\n        valuesArray[i] = valueFunction(i);\n    }\n    return valuesArray;\n}\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\nclass NativeDateAdapter extends DateAdapter {\n    constructor(matDateLocale, platform) {\n        super();\n        /**\n         * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n         * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n         * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n         * will produce `'8/13/1800'`.\n         *\n         * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n         * getting the string representation of a Date object from its utc representation. We're keeping\n         * it here for sometime, just for precaution, in case we decide to revert some of these changes\n         * though.\n         */\n        this.useUtcForDisplay = true;\n        super.setLocale(matDateLocale);\n        // IE does its own time zone correction, so we disable this on IE.\n        this.useUtcForDisplay = !platform.TRIDENT;\n        this._clampDate = platform.TRIDENT || platform.EDGE;\n    }\n    getYear(date) {\n        return date.getFullYear();\n    }\n    getMonth(date) {\n        return date.getMonth();\n    }\n    getDate(date) {\n        return date.getDate();\n    }\n    getHours(date) {\n        return date.getHours();\n    }\n    setHours(date, value) {\n        const clone = this.clone(date);\n        clone.setHours(value);\n        return clone;\n    }\n    getMinutes(date) {\n        return date.getMinutes();\n    }\n    setMinutes(date, value) {\n        const clone = this.clone(date);\n        clone.setMinutes(value);\n        return clone;\n    }\n    getSeconds(date) {\n        return date.getSeconds();\n    }\n    setSeconds(date, value, ms) {\n        const clone = this.clone(date);\n        clone.setSeconds(value, ms);\n        return clone;\n    }\n    getMilliseconds(date) {\n        return date.getMilliseconds();\n    }\n    getDayOfWeek(date) {\n        return date.getDay();\n    }\n    getMonthNames(style) {\n        if (SUPPORTS_INTL_API) {\n            const dtf = new Intl.DateTimeFormat(this.locale, { month: style, timeZone: 'utc' });\n            return range(12, i => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n        }\n        return DEFAULT_MONTH_NAMES[style];\n    }\n    getDateNames() {\n        if (SUPPORTS_INTL_API) {\n            const dtf = new Intl.DateTimeFormat(this.locale, { day: 'numeric', timeZone: 'utc' });\n            return range(31, i => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, 0, i + 1))));\n        }\n        return DEFAULT_DATE_NAMES;\n    }\n    getHourNames() {\n        return DEFAULT_HOUR_NAMES;\n    }\n    getMinuteNames() {\n        return DEFAULT_MINUTE_NAMES;\n    }\n    getDayOfWeekNames(style) {\n        if (SUPPORTS_INTL_API) {\n            const dtf = new Intl.DateTimeFormat(this.locale, { weekday: style, timeZone: 'utc' });\n            return range(7, i => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, 0, i + 1))));\n        }\n        return DEFAULT_DAY_OF_WEEK_NAMES[style];\n    }\n    getYearName(date) {\n        if (SUPPORTS_INTL_API) {\n            const dtf = new Intl.DateTimeFormat(this.locale, { year: 'numeric', timeZone: 'utc' });\n            return this._stripDirectionalityCharacters(this._format(dtf, date));\n        }\n        return String(this.getYear(date));\n    }\n    getFirstDayOfWeek() {\n        // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n        return 0;\n    }\n    getNumDaysInMonth(date) {\n        return this.getDate(this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + 1, 0));\n    }\n    clone(date) {\n        return new Date(date.getTime());\n    }\n    createDate(year, month, date, hours = 0, minutes = 0, seconds = 0, ms = 0) {\n        if (isDevMode()) {\n            // Check for invalid month and date (except upper bound on date which we have to check after\n            // creating the Date).\n            if (month < 0 || month > 11) {\n                throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n            }\n            if (date < 1) {\n                throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n            }\n        }\n        let result = this._createDateWithOverflow(year, month, date, hours, minutes, seconds, ms);\n        // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n        if (result.getMonth() != month && (isDevMode())) {\n            throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n        }\n        return result;\n    }\n    today() {\n        return new Date();\n    }\n    parse(value) {\n        // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n        // parameters.\n        if (typeof value == 'number') {\n            return new Date(value);\n        }\n        return value ? new Date(Date.parse(value)) : null;\n    }\n    format(date, displayFormat) {\n        if (!this.isValid(date)) {\n            throw Error('NativeDateAdapter: Cannot format invalid date.');\n        }\n        if (SUPPORTS_INTL_API) {\n            // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n            // if we attempt to format a date whose year is less than 1 or greater than 9999.\n            if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n                date = this.clone(date);\n                date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n            }\n            displayFormat = Object.assign(Object.assign({}, displayFormat), { timeZone: 'utc' });\n            const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n            return this._stripDirectionalityCharacters(this._format(dtf, date));\n        }\n        return this._stripDirectionalityCharacters(date.toDateString());\n    }\n    addCalendarYears(date, years) {\n        return this.addCalendarMonths(date, years * 12);\n    }\n    addCalendarMonths(date, months) {\n        let newDate = this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + months, this.getDate(date), this.getHours(date), this.getMinutes(date), this.getSeconds(date));\n        // It's possible to wind up in the wrong month if the original month has more days than the new\n        // month. In this case we want to go to the last day of the desired month.\n        // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n        // guarantee this.\n        if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n            newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n        }\n        return newDate;\n    }\n    addCalendarDays(date, days) {\n        return this._createDateWithOverflow(this.getYear(date), this.getMonth(date), this.getDate(date) + days, this.getHours(date), this.getMinutes(date), this.getSeconds(date));\n    }\n    addCalendarHours(date, hours) {\n        return this._createDateWithOverflow(this.getYear(date), this.getMonth(date), this.getDate(date), this.getHours(date) + hours, this.getMinutes(date), this.getSeconds(date));\n    }\n    addCalendarMinutes(date, minutes) {\n        return this._createDateWithOverflow(this.getYear(date), this.getMonth(date), this.getDate(date), this.getHours(date), this.getMinutes(date) + minutes, this.getSeconds(date));\n    }\n    addCalendarSeconds(date, seconds, ms) {\n        return this._createDateWithOverflow(this.getYear(date), this.getMonth(date), this.getDate(date), this.getHours(date), this.getMinutes(date), this.getSeconds(date) + seconds, this.getMilliseconds(date) + ms);\n    }\n    toIso8601(date) {\n        return [\n            date.getUTCFullYear(),\n            this._2digit(date.getUTCMonth() + 1),\n            this._2digit(date.getUTCDate())\n        ].join('-');\n    }\n    /**\n     * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n     * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n     * invalid date for all other values.\n     */\n    deserialize(value) {\n        if (typeof value === 'string') {\n            if (!value) {\n                return null;\n            }\n            // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n            // string is the right format first.\n            if (ISO_8601_REGEX.test(value)) {\n                let date = new Date(value);\n                if (this.isValid(date)) {\n                    return date;\n                }\n            }\n        }\n        return super.deserialize(value);\n    }\n    isDateInstance(obj) {\n        return obj instanceof Date;\n    }\n    isValid(date) {\n        return !isNaN(date.getTime());\n    }\n    invalid() {\n        return new Date(NaN);\n    }\n    /** Creates a date but allows the month and date to overflow. */\n    _createDateWithOverflow(year, month, date, hours = 0, minutes = 0, seconds = 0, ms = 0) {\n        // Passing the year to the constructor causes year numbers <100 to be converted to 19xx.\n        // To work around this we use `setFullYear` and `setHours` instead.\n        const d = new Date();\n        d.setFullYear(year, month, date);\n        d.setHours(hours, minutes, seconds, ms);\n        return d;\n    }\n    /**\n     * Pads a number to make it two digits.\n     * @param n The number to pad.\n     * @returns The padded number.\n     */\n    _2digit(n) {\n        return ('00' + n).slice(-2);\n    }\n    /**\n     * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n     * other browsers do not. We remove them to make output consistent and because they interfere with\n     * date parsing.\n     * @param str The string to strip direction characters from.\n     * @returns The stripped string.\n     */\n    _stripDirectionalityCharacters(str) {\n        return str.replace(/[\\u200e\\u200f]/g, '');\n    }\n    /**\n     * When converting Date object to string, javascript built-in functions may return wrong\n     * results because it applies its internal DST rules. The DST rules around the world change\n     * very frequently, and the current valid rule is not always valid in previous years though.\n     * We work around this problem building a new Date object which has its internal UTC\n     * representation with the local date and time.\n     * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n     *    timeZone set to 'utc' to work fine.\n     * @param date Date from which we want to get the string representation according to dtf\n     * @returns A Date object with its UTC representation based on the passed in date info\n     */\n    _format(dtf, date) {\n        // Passing the year to the constructor causes year numbers <100 to be converted to 19xx.\n        // To work around this we use `setUTCFullYear` and `setUTCHours` instead.\n        const d = new Date();\n        d.setUTCFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n        d.setUTCHours(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n        return dtf.format(d);\n    }\n}\n/** @nocollapse */ NativeDateAdapter.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.13\", ngImport: i0, type: NativeDateAdapter, deps: [{ token: MAT_DATE_LOCALE, optional: true }, { token: i1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\n/** @nocollapse */ NativeDateAdapter.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.13\", ngImport: i0, type: NativeDateAdapter });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.13\", ngImport: i0, type: NativeDateAdapter, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_DATE_LOCALE]\n                }] }, { type: i1.Platform }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_NATIVE_DATE_FORMATS = {\n    parse: {\n        dateInput: null,\n        datetimeInput: null,\n        timeInput: null,\n        monthInput: null,\n        yearInput: null,\n    },\n    display: {\n        dateInput: { year: 'numeric', month: 'numeric', day: 'numeric' },\n        datetimeInput: {\n            year: 'numeric',\n            month: 'numeric',\n            day: 'numeric',\n            hour: 'numeric',\n            minute: 'numeric'\n        },\n        timeInput: { hour: 'numeric', minute: 'numeric' },\n        monthInput: { month: 'short', year: 'numeric' },\n        yearInput: { year: 'numeric' },\n        dateA11yLabel: { year: 'numeric', month: 'long', day: 'numeric' },\n        monthLabel: { month: 'short' },\n        monthDayLabel: { month: 'short', day: 'numeric' },\n        monthDayA11yLabel: { month: 'long', day: 'numeric' },\n        monthYearLabel: { year: 'numeric', month: 'short' },\n        monthYearA11yLabel: { year: 'numeric', month: 'long' },\n        timeLabel: { hours: 'numeric', minutes: 'numeric' },\n    }\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass NativeDateModule {\n}\n/** @nocollapse */ NativeDateModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.13\", ngImport: i0, type: NativeDateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n/** @nocollapse */ NativeDateModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.13\", ngImport: i0, type: NativeDateModule, imports: [PlatformModule] });\n/** @nocollapse */ NativeDateModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.13\", ngImport: i0, type: NativeDateModule, providers: [\n        { provide: DateAdapter, useClass: NativeDateAdapter },\n        { provide: DateAdapter$1, useClass: NativeDateAdapter },\n    ], imports: [[PlatformModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.13\", ngImport: i0, type: NativeDateModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [PlatformModule],\n                    providers: [\n                        { provide: DateAdapter, useClass: NativeDateAdapter },\n                        { provide: DateAdapter$1, useClass: NativeDateAdapter },\n                    ],\n                }]\n        }] });\nclass MatNativeDateModule {\n}\n/** @nocollapse */ MatNativeDateModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.13\", ngImport: i0, type: MatNativeDateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n/** @nocollapse */ MatNativeDateModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.13\", ngImport: i0, type: MatNativeDateModule, imports: [NativeDateModule] });\n/** @nocollapse */ MatNativeDateModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.13\", ngImport: i0, type: MatNativeDateModule, providers: [{ provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS }], imports: [[NativeDateModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.13\", ngImport: i0, type: MatNativeDateModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [NativeDateModule],\n                    providers: [{ provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS }],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DateAdapter, MAT_NATIVE_DATE_FORMATS, MatNativeDateModule, NativeDateAdapter, NativeDateModule };\n"]},"metadata":{},"sourceType":"module"}