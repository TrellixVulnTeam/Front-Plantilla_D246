{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { DmProcesado } from '../models/datos-maestros/dm-procesado.model';\nimport * as i0 from \"@angular/core\";\nexport let DatosMaestrosService = /*#__PURE__*/(() => {\n  class DatosMaestrosService {\n    //private  ciudadesLst = new BehaviorSubject ([])\n    constructor() {\n      // ********************* falta: Convenio Nombre convenio\n      //#region => Panel: Datos principales\n      this.tipoIdLst = new BehaviorSubject(new DmProcesado());\n      this.nacionalidadesLst = new BehaviorSubject(new DmProcesado());\n      this.sexoLst = new BehaviorSubject(new DmProcesado());\n      this.grupoPoblacionalLst = new BehaviorSubject(new DmProcesado());\n      this.grupoEtnicoLst = new BehaviorSubject(new DmProcesado());\n      this.adminEabpLst = new BehaviorSubject(new DmProcesado());\n      this.nombreConveniosLst = new BehaviorSubject([]); //#endregion\n      // ********************* falta:  Fondo pensiones, sede UN, DependenciaUN, Tipo Solicitud\n      //#region => Panel: Datos Complementarios\n\n      this.orientacionSexualLst = new BehaviorSubject(new DmProcesado());\n      this.estadoCivilLst = new BehaviorSubject(new DmProcesado());\n      this.tipoSangreLst = new BehaviorSubject(new DmProcesado());\n      this.rhLst = new BehaviorSubject(new DmProcesado());\n      this.escolaridadLst = new BehaviorSubject(new DmProcesado());\n      this.ocupacionLst = new BehaviorSubject(new DmProcesado());\n      this.fondoPensionesLst = new BehaviorSubject(new DmProcesado());\n      this.sedeUnLst = new BehaviorSubject(new DmProcesado());\n      this.dependenciaUnLst = new BehaviorSubject(new DmProcesado());\n      this.tipoSolicitudLst = new BehaviorSubject(new DmProcesado());\n      this.epsAnteriorLst = new BehaviorSubject(new DmProcesado());\n      this.regimenLst = new BehaviorSubject(new DmProcesado()); //Ocupacion, Fondo pensiones\n\n      this.sedesLst = new BehaviorSubject(new DmProcesado());\n      this.dependenciasLst = new BehaviorSubject([]); //Tipo Solicitud\n\n      this.discapacidadLst = new BehaviorSubject(new DmProcesado()); //#endregion\n      //#region => Panel: Datos de contacto\n      //Indicativos\n\n      this.departamentosLst = new BehaviorSubject(new DmProcesado());\n      this.ciudadesLst = new BehaviorSubject([]);\n      this.zonaLst = new BehaviorSubject(new DmProcesado());\n      this.localidadesLst = new BehaviorSubject([]);\n      this.barriosLst = new BehaviorSubject([]);\n      this.indicativosLst = new BehaviorSubject(new DmProcesado());\n      this.estratosLst = new BehaviorSubject(new DmProcesado());\n      this.tipoViaLst = new BehaviorSubject(new DmProcesado());\n      this.letraViaLst = new BehaviorSubject(new DmProcesado()); //#endregion\n      //#region => Panel: Datos de emergencia\n\n      this.parentescoLst = new BehaviorSubject(new DmProcesado());\n      this.count = 0;\n    } //#endregion\n    // private  comunasLst: DmProcesado[] = []\n    // private  barriosLst: DmProcesado[] = []\n    ///Sedes\n\n\n    getArray() {\n      var test = [];\n      return test;\n    }\n\n    procesarDatos(datosRecividos) {\n      //Filtro los datos maestros principales, asumiendo que los datos sin posiciÃ³n (null) no tienen padres\n      let maestrosPadresFiltrados = datosRecividos.filter(function (value) {\n        return value.nU_POSITION_DM == null;\n      }); //#region => Panel: Datos principales\n\n      const tipoIdFiltro = maestrosPadresFiltrados.find(data => data.tX_TITULODATOMAESTRO_DM.toUpperCase() == 'TIPO-DE-IDENTIFICACION');\n      const nacionalidadesFiltro = maestrosPadresFiltrados.find(data => data.tX_TITULODATOMAESTRO_DM.toUpperCase() == 'NACIONALIDADES');\n      const sexoFiltro = maestrosPadresFiltrados.find(data => data.tX_TITULODATOMAESTRO_DM.toUpperCase() == 'SEXO');\n      const grupoPoblacionalFiltro = maestrosPadresFiltrados.find(data => data.tX_TITULODATOMAESTRO_DM.toUpperCase() == 'GRUPO-POBLACIONAL');\n      const grupoEtnicoFiltro = maestrosPadresFiltrados.find(data => data.tX_TITULODATOMAESTRO_DM.toUpperCase() == 'GRUPO ETNICO');\n      const adminEabpFiltro = maestrosPadresFiltrados.find(data => data.tX_TITULODATOMAESTRO_DM.toUpperCase() == 'ADMINISTRADORA-EAPB');\n      const nombreConveniosFiltro = datosRecividos.filter(function (valor) {\n        return parseInt(valor.nU_IDRELACION_DM) == (adminEabpFiltro === null || adminEabpFiltro === void 0 ? void 0 : adminEabpFiltro.nU_IDDATOMAESTRO_DM) && valor.nU_POSITION_DM != null;\n      }); //ADMINISTRADORA-EAPB\n\n      this.tipoIdLst.next(this.generarObjetoDm(tipoIdFiltro));\n      this.nacionalidadesLst.next(this.generarObjetoDm(nacionalidadesFiltro));\n      this.sexoLst.next(this.generarObjetoDm(sexoFiltro));\n      this.grupoPoblacionalLst.next(this.generarObjetoDm(grupoPoblacionalFiltro));\n      this.grupoEtnicoLst.next(this.generarObjetoDm(grupoEtnicoFiltro));\n      this.adminEabpLst.next(this.generarObjetoDm(adminEabpFiltro));\n      this.nombreConveniosLst.next(this.generarListaDm(nombreConveniosFiltro)); //#endregion\n\n      const indicativosFiltro = maestrosPadresFiltrados.find(data => data.tX_TITULODATOMAESTRO_DM.toUpperCase() == 'INDICATIVOS');\n      this.indicativosLst.next(this.generarObjetoDm(indicativosFiltro));\n      console.log(this.indicativosLst.value); //#region => Panel: Datos Contacto\n\n      const depasFiltro = maestrosPadresFiltrados.find(data => data.tX_TITULODATOMAESTRO_DM.toUpperCase() == 'COL-DPTO');\n      const ciudadesFiltro2 = datosRecividos.filter(function (valor) {\n        return parseInt(valor.nU_IDRELACION_DM) == (depasFiltro === null || depasFiltro === void 0 ? void 0 : depasFiltro.nU_IDDATOMAESTRO_DM) && valor.nU_POSITION_DM != null;\n      });\n      const zonasFiltro = maestrosPadresFiltrados.find(data => data.tX_TITULODATOMAESTRO_DM.toUpperCase() == 'ZONA');\n      const estratoFiltro = maestrosPadresFiltrados.find(data => data.tX_TITULODATOMAESTRO_DM.toUpperCase() == 'ESTRATO');\n      const tipoViaFiltro = maestrosPadresFiltrados.find(data => data.tX_TITULODATOMAESTRO_DM.toUpperCase() == 'TIPO-DE-VIA-PRINCIPAL');\n      const letraViaFiltro = maestrosPadresFiltrados.find(data => data.tX_TITULODATOMAESTRO_DM.toUpperCase() == 'LETRA-DE-VIA');\n      this.departamentosLst.next(this.generarObjetoDm(depasFiltro));\n      this.estratosLst.next(this.generarObjetoDm(estratoFiltro));\n      this.tipoViaLst.next(this.generarObjetoDm(tipoViaFiltro));\n      this.letraViaLst.next(this.generarObjetoDm(letraViaFiltro)); //#endregion\n      //const sedesFiltro = maestrosPadresFiltrados.find(data => data.tX_TITULODATOMAESTRO_DM.toUpperCase() == 'SEDEUNAL')\n\n      this.ciudadesLst.next(this.generarListaDm(ciudadesFiltro2));\n      this.zonaLst.next(this.generarObjetoDm(zonasFiltro));\n      let locsFiltro = [];\n\n      for (let index = 0; index < ciudadesFiltro2.length; index++) {\n        let tmp = datosRecividos.filter(function (valor) {\n          var _a;\n\n          return parseInt(valor.nU_IDRELACION_DM) == ((_a = ciudadesFiltro2[index]) === null || _a === void 0 ? void 0 : _a.nU_IDDATOMAESTRO_DM) && valor.nU_POSITION_DM != null;\n        });\n        tmp.forEach(element => {\n          locsFiltro.push(element);\n        });\n      }\n\n      this.localidadesLst.next(this.generarListaDm(locsFiltro));\n      let barriosFiltro = [];\n\n      for (let index = 0; index < locsFiltro.length; index++) {\n        let tmp = datosRecividos.filter(function (valor) {\n          var _a;\n\n          return parseInt(valor.nU_IDRELACION_DM) == ((_a = locsFiltro[index]) === null || _a === void 0 ? void 0 : _a.nU_IDDATOMAESTRO_DM) && valor.nU_POSITION_DM != null;\n        });\n        tmp.forEach(element => {\n          barriosFiltro.push(element);\n        });\n      }\n\n      this.barriosLst.next(this.generarListaDm(barriosFiltro)); // const barriosFiltro = datosRecividos.filter(function(valor) {\n      //   return parseInt(valor.nU_IDRELACION_DM) == depasFiltro?.nU_IDDATOMAESTRO_DM && valor.nU_POSITION_DM != null\n      // });\n      //   private  localidadesLst =new BehaviorSubject<DmProcesado[]>([]);\n      // private  barriosLst =new BehaviorSubject<DmProcesado[]>([]);\n      //#region => Panel: Datos Complementarios\n\n      const orientacionSexualFiltro = maestrosPadresFiltrados.find(data => data.tX_TITULODATOMAESTRO_DM.toUpperCase() == 'ORIENTACIONSEXUAL');\n      const estadoCivilFiltro = maestrosPadresFiltrados.find(data => data.tX_TITULODATOMAESTRO_DM.toUpperCase() == 'ESTADO CIVIL');\n      const tiposSangreFiltro = maestrosPadresFiltrados.find(data => data.tX_TITULODATOMAESTRO_DM.toUpperCase() == 'TIPOS-DE-SANGRE');\n      const rhFiltro = maestrosPadresFiltrados.find(data => data.tX_TITULODATOMAESTRO_DM.toUpperCase() == 'RH'); //Escolaridad\n\n      const escolaridadFiltro = maestrosPadresFiltrados.find(data => data.tX_TITULODATOMAESTRO_DM.toUpperCase() == 'ESCOLARIDAD');\n      const epsAnteriorFiltro = maestrosPadresFiltrados.find(data => data.tX_TITULODATOMAESTRO_DM.toUpperCase() == 'EPSANTERIOR');\n      const regimenFiltro = maestrosPadresFiltrados.find(data => data.tX_TITULODATOMAESTRO_DM.toUpperCase() == 'REGIMEN'); //Ocupacion, Fondo pensiones\n\n      const ocupacionFiltro = maestrosPadresFiltrados.find(data => data.tX_TITULODATOMAESTRO_DM.toUpperCase() == 'OCUPACION');\n      const fondoPensionesFiltro = maestrosPadresFiltrados.find(data => data.tX_TITULODATOMAESTRO_DM.toUpperCase() == 'FONDOS-DE-PENSION');\n      const sedesFiltro = maestrosPadresFiltrados.find(data => data.tX_TITULODATOMAESTRO_DM.toUpperCase() == 'SEDEUNAL');\n      const dependenciasFiltro = datosRecividos.filter(function (valor) {\n        return parseInt(valor.nU_IDRELACION_DM) == (sedesFiltro === null || sedesFiltro === void 0 ? void 0 : sedesFiltro.nU_IDDATOMAESTRO_DM) && valor.nU_POSITION_DM != null;\n      }); //Tipo Solicitud\n\n      const tipoSolicitudFiltro = maestrosPadresFiltrados.find(data => data.tX_TITULODATOMAESTRO_DM.toUpperCase() == 'TIPO-DE-SOLICITUD');\n      const discapacidadFiltro = maestrosPadresFiltrados.find(data => data.tX_TITULODATOMAESTRO_DM.toUpperCase() == 'DISCAPACIDAD');\n      this.orientacionSexualLst.next(this.generarObjetoDm(orientacionSexualFiltro));\n      this.estadoCivilLst.next(this.generarObjetoDm(estadoCivilFiltro));\n      this.tipoSangreLst.next(this.generarObjetoDm(tiposSangreFiltro));\n      this.rhLst.next(this.generarObjetoDm(rhFiltro)); //Escolaridad\n\n      this.escolaridadLst.next(this.generarObjetoDm(escolaridadFiltro));\n      this.epsAnteriorLst.next(this.generarObjetoDm(epsAnteriorFiltro));\n      this.regimenLst.next(this.generarObjetoDm(regimenFiltro)); //Ocupacion, Fondo pensiones\n\n      this.ocupacionLst.next(this.generarObjetoDm(ocupacionFiltro));\n      this.fondoPensionesLst.next(this.generarObjetoDm(fondoPensionesFiltro));\n      this.sedesLst.next(this.generarObjetoDm(sedesFiltro));\n      this.dependenciasLst.next(this.generarListaDm(dependenciasFiltro)); //Tipo Solicitud\n\n      this.tipoSolicitudLst.next(this.generarObjetoDm(tipoSolicitudFiltro));\n      this.discapacidadLst.next(this.generarObjetoDm(discapacidadFiltro)); //#endregion\n      //   private  escolaridadLst = new BehaviorSubject(new DmProcesado());\n      // private  ocupacionLst = new BehaviorSubject(new DmProcesado());\n      // private  fondoPensionesLst = new BehaviorSubject(new DmProcesado());\n      // private  sedeUnLst = new BehaviorSubject(new DmProcesado());\n      // private  dependenciaUnLst = new BehaviorSubject(new DmProcesado());\n      // private  tipoSolicitudLst = new BehaviorSubject(new DmProcesado());\n      //#region Datos direcciones\n\n      var dptsFiltro = maestrosPadresFiltrados.find(data => data.tX_TITULODATOMAESTRO_DM.toUpperCase() == 'COL-DPTO');\n      var ciudadesFiltro = datosRecividos.filter(function (valor) {\n        return parseInt(valor.nU_IDRELACION_DM) == (dptsFiltro === null || dptsFiltro === void 0 ? void 0 : dptsFiltro.nU_IDDATOMAESTRO_DM) && valor.nU_POSITION_DM != null;\n      });\n      var comunasFiltro = datosRecividos.filter(function (value) {\n        var _a;\n\n        return parseInt(value.nU_IDRELACION_DM) == ((_a = ciudadesFiltro[0]) === null || _a === void 0 ? void 0 : _a.nU_IDDATOMAESTRO_DM) && value.nU_POSITION_DM != null;\n      }); // var barriosFiltro = datosRecividos.filter(function(value){\n      //   return parseInt(value.nU_IDRELACION_DM) == comunasFiltro[0]?.nU_IDDATOMAESTRO_DM && value.nU_POSITION_DM != null\n      // })\n      // var comunas = this.buscarRelacion(datosRecividos, comunasFiltro, ciudadesFiltro);\n      // var barrios = this.buscarRelacion(datosRecividos, barriosFiltro, comunasFiltro);\n      // this.departamentos = this.generarObjetoDm(dptsFiltro);\n      // this.ciudadesLst = this.generarListaDm(ciudadesFiltro);\n      // this.barriosLst = this.generarListaDm(barrios)\n      // this.comunasLst = this.generarListaDm(comunas);\n      //#endregion\n      //#region\n      // parentescoLst\n\n      const parentescoFiltro = maestrosPadresFiltrados.find(data => data.tX_TITULODATOMAESTRO_DM.toUpperCase() == 'PARENTESCO');\n      this.parentescoLst.next(this.generarObjetoDm(parentescoFiltro)); //#endregion\n      //asignacion\n      //#region log\n      // console.log(this.orientacionSexualLst)\n      // console.log(this.nacionalidadesLst)\n      // console.log(this.sexoLst)\n      // console.log(this.grupoPoblacionalLst)\n      // console.log(this.grupoEtnicoLst)\n      // console.log(this.estadoCivilLst)\n      // console.log(this.epsAnteriorLst)\n      // console.log(this.regimenLst)\n      //#endregion\n      //#endregion\n\n      console.log('finish dms');\n    }\n\n    buscarRelacion(datosRecividos, datosFiltrados, filtroRelacion) {\n      var listaTemp = [];\n\n      for (let index = 0; index < datosFiltrados.length; index++) {\n        datosRecividos.filter(function (value) {\n          var _a;\n\n          if (parseInt(value.nU_IDRELACION_DM) == ((_a = filtroRelacion[index]) === null || _a === void 0 ? void 0 : _a.nU_IDDATOMAESTRO_DM) && value.nU_POSITION_DM != null) {\n            listaTemp.push(value);\n          }\n\n          return value;\n        });\n      }\n\n      return listaTemp;\n    }\n\n    generarObjetoDm(data) {\n      var dmProcesadoObjeto = new DmProcesado(data.aR_DATO_DM, data === null || data === void 0 ? void 0 : data.nU_IDDATOMAESTRO_DM, parseInt(data.nU_IDRELACION_DM), parseInt(data.nU_POSITION_DM), data === null || data === void 0 ? void 0 : data.tX_TITULODATOMAESTRO_DM); // console.log(dmProcesadoObjeto)\n      // console.log('dmProcesadoObjeto')\n      // console.log(++this.count)\n\n      return dmProcesadoObjeto;\n    }\n\n    generarListaDm(data) {\n      var _a, _b;\n\n      let listaTmp = [];\n\n      for (let index = 0; index < data.length; index++) {\n        const tmp = new DmProcesado(data[index].aR_DATO_DM, (_a = data[index]) === null || _a === void 0 ? void 0 : _a.nU_IDDATOMAESTRO_DM, parseInt(data[index].nU_IDRELACION_DM), parseInt(data[index].nU_POSITION_DM), (_b = data[index]) === null || _b === void 0 ? void 0 : _b.tX_TITULODATOMAESTRO_DM);\n        listaTmp.push(tmp);\n      }\n\n      return listaTmp;\n    } //#region => Panel: Datos principales\n\n\n    getTipoId() {\n      return this.tipoIdLst;\n    }\n\n    getNacionalidadesList() {\n      return this.nacionalidadesLst;\n    }\n\n    getSexoList() {\n      return this.sexoLst;\n    }\n\n    getGrupoEtnicoList() {\n      return this.grupoEtnicoLst;\n    }\n\n    getGrupoPoblacional() {\n      return this.grupoPoblacionalLst;\n    }\n\n    getAdminEabp() {\n      return this.adminEabpLst;\n    }\n\n    getConvenios() {\n      return this.nombreConveniosLst;\n    }\n\n    getIndicativos() {\n      return this.indicativosLst;\n    }\n\n    getOcupaciones() {\n      return this.ocupacionLst;\n    }\n\n    getFondoPensiones() {\n      return this.fondoPensionesLst;\n    }\n\n    getEscolaridades() {\n      return this.escolaridadLst;\n    }\n\n    getTipoSolicitud() {\n      return this.tipoSolicitudLst;\n    } //#endregion\n    //#region => Panel: Datos Complementarios\n\n\n    getOrientacionSexual() {\n      return this.orientacionSexualLst;\n    }\n\n    getEstadoCivil() {\n      return this.estadoCivilLst;\n    }\n\n    getTipoSangre() {\n      return this.tipoSangreLst;\n    }\n\n    getRhsLst() {\n      return this.rhLst;\n    } //Escolaridad\n\n\n    getEpsAnterior() {\n      return this.epsAnteriorLst;\n    }\n\n    getRegimen() {\n      return this.regimenLst;\n    } //Ocupacion, Fondo pensiones\n\n\n    getSedes() {\n      return this.sedesLst;\n    }\n\n    getDependencias() {\n      return this.dependenciasLst;\n    } //Tipo Solicitud\n\n\n    getDiscapacidad() {\n      return this.discapacidadLst;\n    } //#endregion\n    //#region => Panel: Datos Contacto\n\n\n    getDepartamentosLst() {\n      return this.departamentosLst;\n    }\n\n    getCiudadesLst() {\n      return this.ciudadesLst;\n    }\n\n    getZonasLst() {\n      return this.zonaLst;\n    }\n\n    getLocalidadesLst() {\n      return this.localidadesLst;\n    }\n\n    getBarriosLst() {\n      return this.barriosLst;\n    }\n\n    getEstratos() {\n      return this.estratosLst;\n    }\n\n    getTipoVia() {\n      return this.tipoViaLst;\n    }\n\n    getLetraVia() {\n      return this.letraViaLst;\n    } //#endregion\n    //#region => Panel: Datos emergencia\n\n\n    getParentescos() {\n      return this.parentescoLst;\n    }\n\n  }\n\n  DatosMaestrosService.Éµfac = function DatosMaestrosService_Factory(t) {\n    return new (t || DatosMaestrosService)();\n  };\n\n  DatosMaestrosService.Éµprov = /*@__PURE__*/i0.ÉµÉµdefineInjectable({\n    token: DatosMaestrosService,\n    factory: DatosMaestrosService.Éµfac,\n    providedIn: 'root'\n  });\n  return DatosMaestrosService;\n})();","map":null,"metadata":{},"sourceType":"module"}